// Generated by "sketch" utility. DO NOT EDIT
package resource

import (
	"bytes"
	"encoding/json"
	"fmt"
	"sort"
	"sync"

	"github.com/lestrrat-go/blackmagic"
)

func init() {
	Register("Address", "", Address{})
	RegisterBuilder("Address", "", AddressBuilder{})
}

type Address struct {
	mu            sync.RWMutex
	country       *string
	formatted     *string
	locality      *string
	postalCode    *string
	region        *string
	streetAddress *string
	typ           *string
	extra         map[string]interface{}
}

// These constants are used when the JSON field name is used.
// Their use is not strictly required, but certain linters
// complain about repeated constants, and therefore internally
// this used throughout
const (
	AddressCountryKey       = "country"
	AddressFormattedKey     = "formatted"
	AddressLocalityKey      = "locality"
	AddressPostalCodeKey    = "postalCode"
	AddressRegionKey        = "region"
	AddressStreetAddressKey = "streetAddress"
	AddressTypeKey          = "type"
)

// Get retrieves the value associated with a key
func (v *Address) Get(key string, dst interface{}) error {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.getNoLock(key, dst, false)
}

// getNoLock is a utility method that is called from Get, MarshalJSON, etc, but
// it can be used from user-supplied code. Unlike Get, it avoids locking for
// each call, so the user needs to explicitly lock the object before using,
// but otherwise should be faster than sing Get directly
func (v *Address) getNoLock(key string, dst interface{}, raw bool) error {
	switch key {
	case AddressCountryKey:
		if val := v.country; val != nil {
			return blackmagic.AssignIfCompatible(dst, *val)
		}
	case AddressFormattedKey:
		if val := v.formatted; val != nil {
			return blackmagic.AssignIfCompatible(dst, *val)
		}
	case AddressLocalityKey:
		if val := v.locality; val != nil {
			return blackmagic.AssignIfCompatible(dst, *val)
		}
	case AddressPostalCodeKey:
		if val := v.postalCode; val != nil {
			return blackmagic.AssignIfCompatible(dst, *val)
		}
	case AddressRegionKey:
		if val := v.region; val != nil {
			return blackmagic.AssignIfCompatible(dst, *val)
		}
	case AddressStreetAddressKey:
		if val := v.streetAddress; val != nil {
			return blackmagic.AssignIfCompatible(dst, *val)
		}
	case AddressTypeKey:
		if val := v.typ; val != nil {
			return blackmagic.AssignIfCompatible(dst, *val)
		}
	default:
		if v.extra != nil {
			val, ok := v.extra[key]
			if ok {
				return blackmagic.AssignIfCompatible(dst, val)
			}
		}
	}
	return fmt.Errorf(`no such key %q`, key)
}

// Set sets the value of the specified field. The name must be a JSON
// field name, not the Go name
func (v *Address) Set(key string, value interface{}) error {
	v.mu.Lock()
	defer v.mu.Unlock()
	switch key {
	case AddressCountryKey:
		converted, ok := value.(string)
		if !ok {
			return fmt.Errorf(`expected value of type string for field country, got %T`, value)
		}
		v.country = &converted
	case AddressFormattedKey:
		converted, ok := value.(string)
		if !ok {
			return fmt.Errorf(`expected value of type string for field formatted, got %T`, value)
		}
		v.formatted = &converted
	case AddressLocalityKey:
		converted, ok := value.(string)
		if !ok {
			return fmt.Errorf(`expected value of type string for field locality, got %T`, value)
		}
		v.locality = &converted
	case AddressPostalCodeKey:
		converted, ok := value.(string)
		if !ok {
			return fmt.Errorf(`expected value of type string for field postalCode, got %T`, value)
		}
		v.postalCode = &converted
	case AddressRegionKey:
		converted, ok := value.(string)
		if !ok {
			return fmt.Errorf(`expected value of type string for field region, got %T`, value)
		}
		v.region = &converted
	case AddressStreetAddressKey:
		converted, ok := value.(string)
		if !ok {
			return fmt.Errorf(`expected value of type string for field streetAddress, got %T`, value)
		}
		v.streetAddress = &converted
	case AddressTypeKey:
		converted, ok := value.(string)
		if !ok {
			return fmt.Errorf(`expected value of type string for field type, got %T`, value)
		}
		v.typ = &converted
	default:
		if v.extra == nil {
			v.extra = make(map[string]interface{})
		}
		v.extra[key] = value
	}
	return nil
}

// Has returns true if the field specified by the argument has been populated.
// The field name must be the JSON field name, not the Go-structure's field name.
func (v *Address) Has(name string) bool {
	switch name {
	case AddressCountryKey:
		return v.country != nil
	case AddressFormattedKey:
		return v.formatted != nil
	case AddressLocalityKey:
		return v.locality != nil
	case AddressPostalCodeKey:
		return v.postalCode != nil
	case AddressRegionKey:
		return v.region != nil
	case AddressStreetAddressKey:
		return v.streetAddress != nil
	case AddressTypeKey:
		return v.typ != nil
	default:
		if v.extra != nil {
			if _, ok := v.extra[name]; ok {
				return true
			}
		}
		return false
	}
}

// Keys returns a slice of string comprising of JSON field names whose values
// are present in the object.
func (v *Address) Keys() []string {
	keys := make([]string, 0, 7)
	if v.country != nil {
		keys = append(keys, AddressCountryKey)
	}
	if v.formatted != nil {
		keys = append(keys, AddressFormattedKey)
	}
	if v.locality != nil {
		keys = append(keys, AddressLocalityKey)
	}
	if v.postalCode != nil {
		keys = append(keys, AddressPostalCodeKey)
	}
	if v.region != nil {
		keys = append(keys, AddressRegionKey)
	}
	if v.streetAddress != nil {
		keys = append(keys, AddressStreetAddressKey)
	}
	if v.typ != nil {
		keys = append(keys, AddressTypeKey)
	}

	if len(v.extra) > 0 {
		for k := range v.extra {
			keys = append(keys, k)
		}
	}
	sort.Strings(keys)
	return keys
}

// HasCountry returns true if the field `country` has been populated
func (v *Address) HasCountry() bool {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.country != nil
}

// HasFormatted returns true if the field `formatted` has been populated
func (v *Address) HasFormatted() bool {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.formatted != nil
}

// HasLocality returns true if the field `locality` has been populated
func (v *Address) HasLocality() bool {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.locality != nil
}

// HasPostalCode returns true if the field `postalCode` has been populated
func (v *Address) HasPostalCode() bool {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.postalCode != nil
}

// HasRegion returns true if the field `region` has been populated
func (v *Address) HasRegion() bool {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.region != nil
}

// HasStreetAddress returns true if the field `streetAddress` has been populated
func (v *Address) HasStreetAddress() bool {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.streetAddress != nil
}

// HasType returns true if the field `type` has been populated
func (v *Address) HasType() bool {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.typ != nil
}

func (v *Address) Country() string {
	v.mu.RLock()
	defer v.mu.RUnlock()
	if val := v.country; val != nil {
		return *val
	}
	return ""
}

func (v *Address) Formatted() string {
	v.mu.RLock()
	defer v.mu.RUnlock()
	if val := v.formatted; val != nil {
		return *val
	}
	return ""
}

func (v *Address) Locality() string {
	v.mu.RLock()
	defer v.mu.RUnlock()
	if val := v.locality; val != nil {
		return *val
	}
	return ""
}

func (v *Address) PostalCode() string {
	v.mu.RLock()
	defer v.mu.RUnlock()
	if val := v.postalCode; val != nil {
		return *val
	}
	return ""
}

func (v *Address) Region() string {
	v.mu.RLock()
	defer v.mu.RUnlock()
	if val := v.region; val != nil {
		return *val
	}
	return ""
}

func (v *Address) StreetAddress() string {
	v.mu.RLock()
	defer v.mu.RUnlock()
	if val := v.streetAddress; val != nil {
		return *val
	}
	return ""
}

func (v *Address) Type() string {
	v.mu.RLock()
	defer v.mu.RUnlock()
	if val := v.typ; val != nil {
		return *val
	}
	return ""
}

// Remove removes the value associated with a key
func (v *Address) Remove(key string) error {
	v.mu.Lock()
	defer v.mu.Unlock()

	switch key {
	case AddressCountryKey:
		v.country = nil
	case AddressFormattedKey:
		v.formatted = nil
	case AddressLocalityKey:
		v.locality = nil
	case AddressPostalCodeKey:
		v.postalCode = nil
	case AddressRegionKey:
		v.region = nil
	case AddressStreetAddressKey:
		v.streetAddress = nil
	case AddressTypeKey:
		v.typ = nil
	default:
		delete(v.extra, key)
	}

	return nil
}

func (v *Address) Clone(dst interface{}) error {
	v.mu.RLock()
	defer v.mu.RUnlock()

	extra := make(map[string]interface{})
	for key, val := range v.extra {
		extra[key] = val
	}
	return blackmagic.AssignIfCompatible(dst, &Address{
		country:       v.country,
		formatted:     v.formatted,
		locality:      v.locality,
		postalCode:    v.postalCode,
		region:        v.region,
		streetAddress: v.streetAddress,
		typ:           v.typ,
		extra:         extra,
	})
}

// MarshalJSON serializes Address into JSON.
// All pre-declared fields are included as long as a value is
// assigned to them, as well as all extra fields. All of these
// fields are sorted in alphabetical order.
func (v *Address) MarshalJSON() ([]byte, error) {
	v.mu.RLock()
	defer v.mu.RUnlock()

	var buf bytes.Buffer
	enc := json.NewEncoder(&buf)
	buf.WriteByte('{')
	for i, k := range v.Keys() {
		var val interface{}
		if err := v.getNoLock(k, &val, true); err != nil {
			return nil, fmt.Errorf(`failed to retrieve value for field %q: %w`, k, err)
		}

		if i > 0 {
			buf.WriteByte(',')
		}
		if err := enc.Encode(k); err != nil {
			return nil, fmt.Errorf(`failed to encode map key name: %w`, err)
		}
		buf.WriteByte(':')
		if err := enc.Encode(val); err != nil {
			return nil, fmt.Errorf(`failed to encode map value for %q: %w`, k, err)
		}
	}
	buf.WriteByte('}')
	return buf.Bytes(), nil
}

// UnmarshalJSON deserializes a piece of JSON data into Address.
//
// Pre-defined fields must be deserializable via "encoding/json" to their
// respective Go types, otherwise an error is returned.
//
// Extra fields are stored in a special "extra" storage, which can only
// be accessed via `Get()` and `Set()` methods.
func (v *Address) UnmarshalJSON(data []byte) error {
	v.mu.Lock()
	defer v.mu.Unlock()
	v.country = nil
	v.formatted = nil
	v.locality = nil
	v.postalCode = nil
	v.region = nil
	v.streetAddress = nil
	v.typ = nil

	dec := json.NewDecoder(bytes.NewReader(data))
	var extra map[string]interface{}

LOOP:
	for {
		tok, err := dec.Token()
		if err != nil {
			return fmt.Errorf(`error reading JSON token: %w`, err)
		}
		switch tok := tok.(type) {
		case json.Delim:
			if tok == '}' { // end of object
				break LOOP
			}
			// we should only get into this clause at the very beginning, and just once
			if tok != '{' {
				return fmt.Errorf(`expected '{', but got '%c'`, tok)
			}
		case string:
			switch tok {
			case AddressCountryKey:
				var val string
				if err := dec.Decode(&val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, AddressCountryKey, err)
				}
				v.country = &val
			case AddressFormattedKey:
				var val string
				if err := dec.Decode(&val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, AddressFormattedKey, err)
				}
				v.formatted = &val
			case AddressLocalityKey:
				var val string
				if err := dec.Decode(&val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, AddressLocalityKey, err)
				}
				v.locality = &val
			case AddressPostalCodeKey:
				var val string
				if err := dec.Decode(&val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, AddressPostalCodeKey, err)
				}
				v.postalCode = &val
			case AddressRegionKey:
				var val string
				if err := dec.Decode(&val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, AddressRegionKey, err)
				}
				v.region = &val
			case AddressStreetAddressKey:
				var val string
				if err := dec.Decode(&val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, AddressStreetAddressKey, err)
				}
				v.streetAddress = &val
			case AddressTypeKey:
				var val string
				if err := dec.Decode(&val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, AddressTypeKey, err)
				}
				v.typ = &val
			default:
				var val interface{}
				if err := v.decodeExtraField(tok, dec, &val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, tok, err)
				}
				if extra == nil {
					extra = make(map[string]interface{})
				}
				extra[tok] = val
			}
		}
	}

	if extra != nil {
		v.extra = extra
	}
	return nil
}

type AddressBuilder struct {
	mu     sync.Mutex
	err    error
	once   sync.Once
	object *Address
}

// NewAddressBuilder creates a new AddressBuilder instance.
// AddressBuilder is safe to be used uninitialized as well.
func NewAddressBuilder() *AddressBuilder {
	return &AddressBuilder{}
}

func (b *AddressBuilder) initialize() {
	b.err = nil
	b.object = &Address{}
}
func (b *AddressBuilder) Country(in string) *AddressBuilder {
	return b.SetField(AddressCountryKey, in)
}
func (b *AddressBuilder) Formatted(in string) *AddressBuilder {
	return b.SetField(AddressFormattedKey, in)
}
func (b *AddressBuilder) Locality(in string) *AddressBuilder {
	return b.SetField(AddressLocalityKey, in)
}
func (b *AddressBuilder) PostalCode(in string) *AddressBuilder {
	return b.SetField(AddressPostalCodeKey, in)
}
func (b *AddressBuilder) Region(in string) *AddressBuilder {
	return b.SetField(AddressRegionKey, in)
}
func (b *AddressBuilder) StreetAddress(in string) *AddressBuilder {
	return b.SetField(AddressStreetAddressKey, in)
}
func (b *AddressBuilder) Type(in string) *AddressBuilder {
	return b.SetField(AddressTypeKey, in)
}

// SetField sets the value of any field. The name should be the JSON field name.
// Type check will only be performed for pre-defined types
func (b *AddressBuilder) SetField(name string, value interface{}) *AddressBuilder {
	b.mu.Lock()
	defer b.mu.Unlock()

	b.once.Do(b.initialize)
	if b.err != nil {
		return b
	}

	if err := b.object.Set(name, value); err != nil {
		b.err = err
	}
	return b
}
func (b *AddressBuilder) Build() (*Address, error) {
	b.mu.Lock()
	defer b.mu.Unlock()

	b.once.Do(b.initialize)
	if b.err != nil {
		return nil, b.err
	}
	obj := b.object
	b.once = sync.Once{}
	b.once.Do(b.initialize)
	return obj, nil
}
func (b *AddressBuilder) MustBuild() *Address {
	object, err := b.Build()
	if err != nil {
		panic(err)
	}
	return object
}

func (b *AddressBuilder) From(in *Address) *AddressBuilder {
	b.mu.Lock()
	defer b.mu.Unlock()
	b.once.Do(b.initialize)
	if b.err != nil {
		return b
	}

	var cloned Address
	if err := in.Clone(&cloned); err != nil {
		b.err = err
		return b
	}

	b.object = &cloned
	return b
}

// AsMap returns the resource as a Go map
func (v *Address) AsMap(m map[string]interface{}) error {
	v.mu.RLock()
	defer v.mu.RUnlock()

	for _, key := range v.Keys() {
		var val interface{}
		if err := v.getNoLock(key, &val, false); err != nil {
			return fmt.Errorf(`failed to retrieve value for key %q: %w`, key, err)
		}
		m[key] = val
	}
	return nil
}

// GetExtension takes into account extension uri, and fetches
// the specified attribute from the extension object
func (v *Address) GetExtension(name, uri string, dst interface{}) error {
	if uri == "" {
		return v.Get(name, dst)
	}
	var ext interface{}
	if err := v.Get(uri, &ext); err != nil {
		return fmt.Errorf(`failed to fetch extension %q: %w`, uri, err)
	}

	getter, ok := ext.(interface {
		Get(string, interface{}) error
	})
	if !ok {
		return fmt.Errorf(`extension does not implement Get(string, interface{}) error`)
	}
	return getter.Get(name, dst)
}

func (*Address) decodeExtraField(name string, dec *json.Decoder, dst interface{}) error {
	// we can get an instance of the resource object
	if rx, ok := registry.LookupByURI(name); ok {
		if err := dec.Decode(&rx); err != nil {
			return fmt.Errorf(`failed to decode value for key %q: %w`, name, err)
		}
		if err := blackmagic.AssignIfCompatible(dst, rx); err != nil {
			return err
		}
	} else {
		if err := dec.Decode(dst); err != nil {
			return fmt.Errorf(`failed to decode value for key %q: %w`, name, err)
		}
	}
	return nil
}

func (b *Builder) Address() *AddressBuilder {
	return &AddressBuilder{}
}
