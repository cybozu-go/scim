// Generated by "sketch" utility. DO NOT EDIT
package resource

import (
	"bytes"
	"encoding/json"
	"fmt"
	"sort"
	"sync"

	"github.com/lestrrat-go/blackmagic"
)

func init() {
	Register("EnterpriseManager", "", EnterpriseManager{})
	RegisterBuilder("EnterpriseManager", "", EnterpriseManagerBuilder{})
}

type EnterpriseManager struct {
	mu          sync.RWMutex
	displayName *string
	id          *string
	ref         *string
	extra       map[string]interface{}
}

// These constants are used when the JSON field name is used.
// Their use is not strictly required, but certain linters
// complain about repeated constants, and therefore internally
// this used throughout
const (
	EnterpriseManagerDisplayNameKey = "displayName"
	EnterpriseManagerIDKey          = "id"
	EnterpriseManagerReferenceKey   = "$ref"
)

// Get retrieves the value associated with a key
func (v *EnterpriseManager) Get(key string, dst interface{}) error {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.getNoLock(key, dst, false)
}

// getNoLock is a utility method that is called from Get, MarshalJSON, etc, but
// it can be used from user-supplied code. Unlike Get, it avoids locking for
// each call, so the user needs to explicitly lock the object before using,
// but otherwise should be faster than sing Get directly
func (v *EnterpriseManager) getNoLock(key string, dst interface{}, raw bool) error {
	switch key {
	case EnterpriseManagerDisplayNameKey:
		if val := v.displayName; val != nil {
			return blackmagic.AssignIfCompatible(dst, *val)
		}
	case EnterpriseManagerIDKey:
		if val := v.id; val != nil {
			return blackmagic.AssignIfCompatible(dst, *val)
		}
	case EnterpriseManagerReferenceKey:
		if val := v.ref; val != nil {
			return blackmagic.AssignIfCompatible(dst, *val)
		}
	default:
		if v.extra != nil {
			val, ok := v.extra[key]
			if ok {
				return blackmagic.AssignIfCompatible(dst, val)
			}
		}
	}
	return fmt.Errorf(`no such key %q`, key)
}

// Set sets the value of the specified field. The name must be a JSON
// field name, not the Go name
func (v *EnterpriseManager) Set(key string, value interface{}) error {
	v.mu.Lock()
	defer v.mu.Unlock()
	switch key {
	case EnterpriseManagerDisplayNameKey:
		converted, ok := value.(string)
		if !ok {
			return fmt.Errorf(`expected value of type string for field displayName, got %T`, value)
		}
		v.displayName = &converted
	case EnterpriseManagerIDKey:
		converted, ok := value.(string)
		if !ok {
			return fmt.Errorf(`expected value of type string for field id, got %T`, value)
		}
		v.id = &converted
	case EnterpriseManagerReferenceKey:
		converted, ok := value.(string)
		if !ok {
			return fmt.Errorf(`expected value of type string for field $ref, got %T`, value)
		}
		v.ref = &converted
	default:
		if v.extra == nil {
			v.extra = make(map[string]interface{})
		}
		v.extra[key] = value
	}
	return nil
}

// Has returns true if the field specified by the argument has been populated.
// The field name must be the JSON field name, not the Go-structure's field name.
func (v *EnterpriseManager) Has(name string) bool {
	switch name {
	case EnterpriseManagerDisplayNameKey:
		return v.displayName != nil
	case EnterpriseManagerIDKey:
		return v.id != nil
	case EnterpriseManagerReferenceKey:
		return v.ref != nil
	default:
		if v.extra != nil {
			if _, ok := v.extra[name]; ok {
				return true
			}
		}
		return false
	}
}

// Keys returns a slice of string comprising of JSON field names whose values
// are present in the object.
func (v *EnterpriseManager) Keys() []string {
	keys := make([]string, 0, 3)
	if v.displayName != nil {
		keys = append(keys, EnterpriseManagerDisplayNameKey)
	}
	if v.id != nil {
		keys = append(keys, EnterpriseManagerIDKey)
	}
	if v.ref != nil {
		keys = append(keys, EnterpriseManagerReferenceKey)
	}

	if len(v.extra) > 0 {
		for k := range v.extra {
			keys = append(keys, k)
		}
	}
	sort.Strings(keys)
	return keys
}

// HasDisplayName returns true if the field `displayName` has been populated
func (v *EnterpriseManager) HasDisplayName() bool {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.displayName != nil
}

// HasID returns true if the field `id` has been populated
func (v *EnterpriseManager) HasID() bool {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.id != nil
}

// HasReference returns true if the field `$ref` has been populated
func (v *EnterpriseManager) HasReference() bool {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.ref != nil
}

func (v *EnterpriseManager) DisplayName() string {
	v.mu.RLock()
	defer v.mu.RUnlock()
	if val := v.displayName; val != nil {
		return *val
	}
	return ""
}

func (v *EnterpriseManager) ID() string {
	v.mu.RLock()
	defer v.mu.RUnlock()
	if val := v.id; val != nil {
		return *val
	}
	return ""
}

func (v *EnterpriseManager) Reference() string {
	v.mu.RLock()
	defer v.mu.RUnlock()
	if val := v.ref; val != nil {
		return *val
	}
	return ""
}

// Remove removes the value associated with a key
func (v *EnterpriseManager) Remove(key string) error {
	v.mu.Lock()
	defer v.mu.Unlock()

	switch key {
	case EnterpriseManagerDisplayNameKey:
		v.displayName = nil
	case EnterpriseManagerIDKey:
		v.id = nil
	case EnterpriseManagerReferenceKey:
		v.ref = nil
	default:
		delete(v.extra, key)
	}

	return nil
}

func (v *EnterpriseManager) Clone(dst interface{}) error {
	v.mu.RLock()
	defer v.mu.RUnlock()

	extra := make(map[string]interface{})
	for key, val := range v.extra {
		extra[key] = val
	}
	return blackmagic.AssignIfCompatible(dst, &EnterpriseManager{
		displayName: v.displayName,
		id:          v.id,
		ref:         v.ref,
		extra:       extra,
	})
}

// MarshalJSON serializes EnterpriseManager into JSON.
// All pre-declared fields are included as long as a value is
// assigned to them, as well as all extra fields. All of these
// fields are sorted in alphabetical order.
func (v *EnterpriseManager) MarshalJSON() ([]byte, error) {
	v.mu.RLock()
	defer v.mu.RUnlock()

	var buf bytes.Buffer
	enc := json.NewEncoder(&buf)
	buf.WriteByte('{')
	for i, k := range v.Keys() {
		var val interface{}
		if err := v.getNoLock(k, &val, true); err != nil {
			return nil, fmt.Errorf(`failed to retrieve value for field %q: %w`, k, err)
		}

		if i > 0 {
			buf.WriteByte(',')
		}
		if err := enc.Encode(k); err != nil {
			return nil, fmt.Errorf(`failed to encode map key name: %w`, err)
		}
		buf.WriteByte(':')
		if err := enc.Encode(val); err != nil {
			return nil, fmt.Errorf(`failed to encode map value for %q: %w`, k, err)
		}
	}
	buf.WriteByte('}')
	return buf.Bytes(), nil
}

// UnmarshalJSON deserializes a piece of JSON data into EnterpriseManager.
//
// Pre-defined fields must be deserializable via "encoding/json" to their
// respective Go types, otherwise an error is returned.
//
// Extra fields are stored in a special "extra" storage, which can only
// be accessed via `Get()` and `Set()` methods.
func (v *EnterpriseManager) UnmarshalJSON(data []byte) error {
	v.mu.Lock()
	defer v.mu.Unlock()
	v.displayName = nil
	v.id = nil
	v.ref = nil

	dec := json.NewDecoder(bytes.NewReader(data))
	var extra map[string]interface{}

LOOP:
	for {
		tok, err := dec.Token()
		if err != nil {
			return fmt.Errorf(`error reading JSON token: %w`, err)
		}
		switch tok := tok.(type) {
		case json.Delim:
			if tok == '}' { // end of object
				break LOOP
			}
			// we should only get into this clause at the very beginning, and just once
			if tok != '{' {
				return fmt.Errorf(`expected '{', but got '%c'`, tok)
			}
		case string:
			switch tok {
			case EnterpriseManagerDisplayNameKey:
				var val string
				if err := dec.Decode(&val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, EnterpriseManagerDisplayNameKey, err)
				}
				v.displayName = &val
			case EnterpriseManagerIDKey:
				var val string
				if err := dec.Decode(&val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, EnterpriseManagerIDKey, err)
				}
				v.id = &val
			case EnterpriseManagerReferenceKey:
				var val string
				if err := dec.Decode(&val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, EnterpriseManagerReferenceKey, err)
				}
				v.ref = &val
			default:
				var val interface{}
				if err := v.decodeExtraField(tok, dec, &val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, tok, err)
				}
				if extra == nil {
					extra = make(map[string]interface{})
				}
				extra[tok] = val
			}
		}
	}

	if extra != nil {
		v.extra = extra
	}
	return nil
}

type EnterpriseManagerBuilder struct {
	mu     sync.Mutex
	err    error
	once   sync.Once
	object *EnterpriseManager
}

// NewEnterpriseManagerBuilder creates a new EnterpriseManagerBuilder instance.
// EnterpriseManagerBuilder is safe to be used uninitialized as well.
func NewEnterpriseManagerBuilder() *EnterpriseManagerBuilder {
	return &EnterpriseManagerBuilder{}
}

func (b *EnterpriseManagerBuilder) initialize() {
	b.err = nil
	b.object = &EnterpriseManager{}
}
func (b *EnterpriseManagerBuilder) DisplayName(in string) *EnterpriseManagerBuilder {
	return b.SetField(EnterpriseManagerDisplayNameKey, in)
}
func (b *EnterpriseManagerBuilder) ID(in string) *EnterpriseManagerBuilder {
	return b.SetField(EnterpriseManagerIDKey, in)
}
func (b *EnterpriseManagerBuilder) Reference(in string) *EnterpriseManagerBuilder {
	return b.SetField(EnterpriseManagerReferenceKey, in)
}

// SetField sets the value of any field. The name should be the JSON field name.
// Type check will only be performed for pre-defined types
func (b *EnterpriseManagerBuilder) SetField(name string, value interface{}) *EnterpriseManagerBuilder {
	b.mu.Lock()
	defer b.mu.Unlock()

	b.once.Do(b.initialize)
	if b.err != nil {
		return b
	}

	if err := b.object.Set(name, value); err != nil {
		b.err = err
	}
	return b
}
func (b *EnterpriseManagerBuilder) Build() (*EnterpriseManager, error) {
	b.mu.Lock()
	defer b.mu.Unlock()

	b.once.Do(b.initialize)
	if b.err != nil {
		return nil, b.err
	}
	obj := b.object
	b.once = sync.Once{}
	b.once.Do(b.initialize)
	return obj, nil
}
func (b *EnterpriseManagerBuilder) MustBuild() *EnterpriseManager {
	object, err := b.Build()
	if err != nil {
		panic(err)
	}
	return object
}

func (b *EnterpriseManagerBuilder) From(in *EnterpriseManager) *EnterpriseManagerBuilder {
	b.mu.Lock()
	defer b.mu.Unlock()
	b.once.Do(b.initialize)
	if b.err != nil {
		return b
	}

	var cloned EnterpriseManager
	if err := in.Clone(&cloned); err != nil {
		b.err = err
		return b
	}

	b.object = &cloned
	return b
}

// AsMap returns the resource as a Go map
func (v *EnterpriseManager) AsMap(m map[string]interface{}) error {
	v.mu.RLock()
	defer v.mu.RUnlock()

	for _, key := range v.Keys() {
		var val interface{}
		if err := v.getNoLock(key, &val, false); err != nil {
			m[key] = val
		}
	}
	return nil
}

// GetExtension takes into account extension uri, and fetches
// the specified attribute from the extension object
func (v *EnterpriseManager) GetExtension(name, uri string, dst interface{}) error {
	if uri == "" {
		return v.Get(name, dst)
	}
	var ext interface{}
	if err := v.Get(uri, &ext); err != nil {
		return fmt.Errorf(`failed to fetch extension %q: %w`, uri, err)
	}

	getter, ok := ext.(interface {
		Get(string, interface{}) error
	})
	if !ok {
		return fmt.Errorf(`extension does not implement Get(string, interface{}) error`)
	}
	return getter.Get(name, dst)
}

func (*EnterpriseManager) decodeExtraField(name string, dec *json.Decoder, dst interface{}) error {
	// we can get an instance of the resource object
	if rx, ok := registry.LookupByURI(name); ok {
		if err := dec.Decode(&rx); err != nil {
			return fmt.Errorf(`failed to decode value for key %q: %w`, name, err)
		}
		if err := blackmagic.AssignIfCompatible(dst, rx); err != nil {
			return err
		}
	} else {
		if err := dec.Decode(dst); err != nil {
			return fmt.Errorf(`failed to decode value for key %q: %w`, name, err)
		}
	}
	return nil
}

func (b *Builder) EnterpriseManager() *EnterpriseManagerBuilder {
	return &EnterpriseManagerBuilder{}
}
