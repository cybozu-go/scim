// Generated by "sketch" utility. DO NOT EDIT
package resource

import (
	"bytes"
	"encoding/json"
	"fmt"
	"sort"
	"sync"

	"github.com/lestrrat-go/blackmagic"
)

const EnterpriseUserSchemaURI = "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User"

func init() {
	Register("EnterpriseUser", EnterpriseUserSchemaURI, EnterpriseUser{})
	RegisterBuilder("EnterpriseUser", EnterpriseUserSchemaURI, EnterpriseUserBuilder{})
}

type EnterpriseUser struct {
	mu             sync.RWMutex
	costCenter     *string
	department     *string
	division       *string
	employeeNumber *string
	manager        *EnterpriseManager
	organization   *string
	schemas        *schemas
	extra          map[string]interface{}
}

// These constants are used when the JSON field name is used.
// Their use is not strictly required, but certain linters
// complain about repeated constants, and therefore internally
// this used throughout
const (
	EnterpriseUserCostCenterKey     = "costCenter"
	EnterpriseUserDepartmentKey     = "department"
	EnterpriseUserDivisionKey       = "division"
	EnterpriseUserEmployeeNumberKey = "employeeNumber"
	EnterpriseUserManagerKey        = "manager"
	EnterpriseUserOrganizationKey   = "organization"
	EnterpriseUserSchemasKey        = "schemas"
)

// Get retrieves the value associated with a key
func (v *EnterpriseUser) Get(key string, dst interface{}) error {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.getNoLock(key, dst, false)
}

// getNoLock is a utility method that is called from Get, MarshalJSON, etc, but
// it can be used from user-supplied code. Unlike Get, it avoids locking for
// each call, so the user needs to explicitly lock the object before using,
// but otherwise should be faster than sing Get directly
func (v *EnterpriseUser) getNoLock(key string, dst interface{}, raw bool) error {
	switch key {
	case EnterpriseUserCostCenterKey:
		if val := v.costCenter; val != nil {
			return blackmagic.AssignIfCompatible(dst, *val)
		}
	case EnterpriseUserDepartmentKey:
		if val := v.department; val != nil {
			return blackmagic.AssignIfCompatible(dst, *val)
		}
	case EnterpriseUserDivisionKey:
		if val := v.division; val != nil {
			return blackmagic.AssignIfCompatible(dst, *val)
		}
	case EnterpriseUserEmployeeNumberKey:
		if val := v.employeeNumber; val != nil {
			return blackmagic.AssignIfCompatible(dst, *val)
		}
	case EnterpriseUserManagerKey:
		if val := v.manager; val != nil {
			return blackmagic.AssignIfCompatible(dst, val)
		}
	case EnterpriseUserOrganizationKey:
		if val := v.organization; val != nil {
			return blackmagic.AssignIfCompatible(dst, *val)
		}
	case EnterpriseUserSchemasKey:
		if val := v.schemas; val != nil {
			if raw {
				return blackmagic.AssignIfCompatible(dst, *val)
			}
			return blackmagic.AssignIfCompatible(dst, val.GetValue())
		}
	default:
		if v.extra != nil {
			val, ok := v.extra[key]
			if ok {
				return blackmagic.AssignIfCompatible(dst, val)
			}
		}
	}
	return fmt.Errorf(`no such key %q`, key)
}

// Set sets the value of the specified field. The name must be a JSON
// field name, not the Go name
func (v *EnterpriseUser) Set(key string, value interface{}) error {
	v.mu.Lock()
	defer v.mu.Unlock()
	switch key {
	case EnterpriseUserCostCenterKey:
		converted, ok := value.(string)
		if !ok {
			return fmt.Errorf(`expected value of type string for field costCenter, got %T`, value)
		}
		v.costCenter = &converted
	case EnterpriseUserDepartmentKey:
		converted, ok := value.(string)
		if !ok {
			return fmt.Errorf(`expected value of type string for field department, got %T`, value)
		}
		v.department = &converted
	case EnterpriseUserDivisionKey:
		converted, ok := value.(string)
		if !ok {
			return fmt.Errorf(`expected value of type string for field division, got %T`, value)
		}
		v.division = &converted
	case EnterpriseUserEmployeeNumberKey:
		converted, ok := value.(string)
		if !ok {
			return fmt.Errorf(`expected value of type string for field employeeNumber, got %T`, value)
		}
		v.employeeNumber = &converted
	case EnterpriseUserManagerKey:
		converted, ok := value.(*EnterpriseManager)
		if !ok {
			return fmt.Errorf(`expected value of type *EnterpriseManager for field manager, got %T`, value)
		}
		v.manager = converted
	case EnterpriseUserOrganizationKey:
		converted, ok := value.(string)
		if !ok {
			return fmt.Errorf(`expected value of type string for field organization, got %T`, value)
		}
		v.organization = &converted
	case EnterpriseUserSchemasKey:
		var object schemas
		if err := object.AcceptValue(value); err != nil {
			return fmt.Errorf(`failed to accept value: %w`, err)
		}
		v.schemas = &object
	default:
		if v.extra == nil {
			v.extra = make(map[string]interface{})
		}
		v.extra[key] = value
	}
	return nil
}

// Has returns true if the field specified by the argument has been populated.
// The field name must be the JSON field name, not the Go-structure's field name.
func (v *EnterpriseUser) Has(name string) bool {
	switch name {
	case EnterpriseUserCostCenterKey:
		return v.costCenter != nil
	case EnterpriseUserDepartmentKey:
		return v.department != nil
	case EnterpriseUserDivisionKey:
		return v.division != nil
	case EnterpriseUserEmployeeNumberKey:
		return v.employeeNumber != nil
	case EnterpriseUserManagerKey:
		return v.manager != nil
	case EnterpriseUserOrganizationKey:
		return v.organization != nil
	case EnterpriseUserSchemasKey:
		return v.schemas != nil
	default:
		if v.extra != nil {
			if _, ok := v.extra[name]; ok {
				return true
			}
		}
		return false
	}
}

// Keys returns a slice of string comprising of JSON field names whose values
// are present in the object.
func (v *EnterpriseUser) Keys() []string {
	keys := make([]string, 0, 7)
	if v.costCenter != nil {
		keys = append(keys, EnterpriseUserCostCenterKey)
	}
	if v.department != nil {
		keys = append(keys, EnterpriseUserDepartmentKey)
	}
	if v.division != nil {
		keys = append(keys, EnterpriseUserDivisionKey)
	}
	if v.employeeNumber != nil {
		keys = append(keys, EnterpriseUserEmployeeNumberKey)
	}
	if v.manager != nil {
		keys = append(keys, EnterpriseUserManagerKey)
	}
	if v.organization != nil {
		keys = append(keys, EnterpriseUserOrganizationKey)
	}
	if v.schemas != nil {
		keys = append(keys, EnterpriseUserSchemasKey)
	}

	if len(v.extra) > 0 {
		for k := range v.extra {
			keys = append(keys, k)
		}
	}
	sort.Strings(keys)
	return keys
}

// HasCostCenter returns true if the field `costCenter` has been populated
func (v *EnterpriseUser) HasCostCenter() bool {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.costCenter != nil
}

// HasDepartment returns true if the field `department` has been populated
func (v *EnterpriseUser) HasDepartment() bool {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.department != nil
}

// HasDivision returns true if the field `division` has been populated
func (v *EnterpriseUser) HasDivision() bool {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.division != nil
}

// HasEmployeeNumber returns true if the field `employeeNumber` has been populated
func (v *EnterpriseUser) HasEmployeeNumber() bool {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.employeeNumber != nil
}

// HasManager returns true if the field `manager` has been populated
func (v *EnterpriseUser) HasManager() bool {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.manager != nil
}

// HasOrganization returns true if the field `organization` has been populated
func (v *EnterpriseUser) HasOrganization() bool {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.organization != nil
}

// HasSchemas returns true if the field `schemas` has been populated
func (v *EnterpriseUser) HasSchemas() bool {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.schemas != nil
}

func (v *EnterpriseUser) CostCenter() string {
	v.mu.RLock()
	defer v.mu.RUnlock()
	if val := v.costCenter; val != nil {
		return *val
	}
	return ""
}

func (v *EnterpriseUser) Department() string {
	v.mu.RLock()
	defer v.mu.RUnlock()
	if val := v.department; val != nil {
		return *val
	}
	return ""
}

func (v *EnterpriseUser) Division() string {
	v.mu.RLock()
	defer v.mu.RUnlock()
	if val := v.division; val != nil {
		return *val
	}
	return ""
}

func (v *EnterpriseUser) EmployeeNumber() string {
	v.mu.RLock()
	defer v.mu.RUnlock()
	if val := v.employeeNumber; val != nil {
		return *val
	}
	return ""
}

func (v *EnterpriseUser) Manager() *EnterpriseManager {
	v.mu.RLock()
	defer v.mu.RUnlock()
	if val := v.manager; val != nil {
		return val
	}
	return nil
}

func (v *EnterpriseUser) Organization() string {
	v.mu.RLock()
	defer v.mu.RUnlock()
	if val := v.organization; val != nil {
		return *val
	}
	return ""
}

func (v *EnterpriseUser) Schemas() []string {
	v.mu.RLock()
	defer v.mu.RUnlock()
	if val := v.schemas; val != nil {
		return val.GetValue()
	}
	return nil
}

// Remove removes the value associated with a key
func (v *EnterpriseUser) Remove(key string) error {
	v.mu.Lock()
	defer v.mu.Unlock()

	switch key {
	case EnterpriseUserCostCenterKey:
		v.costCenter = nil
	case EnterpriseUserDepartmentKey:
		v.department = nil
	case EnterpriseUserDivisionKey:
		v.division = nil
	case EnterpriseUserEmployeeNumberKey:
		v.employeeNumber = nil
	case EnterpriseUserManagerKey:
		v.manager = nil
	case EnterpriseUserOrganizationKey:
		v.organization = nil
	case EnterpriseUserSchemasKey:
		v.schemas = nil
	default:
		delete(v.extra, key)
	}

	return nil
}

func (v *EnterpriseUser) Clone(dst interface{}) error {
	v.mu.RLock()
	defer v.mu.RUnlock()

	extra := make(map[string]interface{})
	for key, val := range v.extra {
		extra[key] = val
	}
	return blackmagic.AssignIfCompatible(dst, &EnterpriseUser{
		costCenter:     v.costCenter,
		department:     v.department,
		division:       v.division,
		employeeNumber: v.employeeNumber,
		manager:        v.manager,
		organization:   v.organization,
		schemas:        v.schemas,
		extra:          extra,
	})
}

// MarshalJSON serializes EnterpriseUser into JSON.
// All pre-declared fields are included as long as a value is
// assigned to them, as well as all extra fields. All of these
// fields are sorted in alphabetical order.
func (v *EnterpriseUser) MarshalJSON() ([]byte, error) {
	v.mu.RLock()
	defer v.mu.RUnlock()

	var buf bytes.Buffer
	enc := json.NewEncoder(&buf)
	buf.WriteByte('{')
	for i, k := range v.Keys() {
		var val interface{}
		if err := v.getNoLock(k, &val, true); err != nil {
			return nil, fmt.Errorf(`failed to retrieve value for field %q: %w`, k, err)
		}

		if i > 0 {
			buf.WriteByte(',')
		}
		if err := enc.Encode(k); err != nil {
			return nil, fmt.Errorf(`failed to encode map key name: %w`, err)
		}
		buf.WriteByte(':')
		if err := enc.Encode(val); err != nil {
			return nil, fmt.Errorf(`failed to encode map value for %q: %w`, k, err)
		}
	}
	buf.WriteByte('}')
	return buf.Bytes(), nil
}

// UnmarshalJSON deserializes a piece of JSON data into EnterpriseUser.
//
// Pre-defined fields must be deserializable via "encoding/json" to their
// respective Go types, otherwise an error is returned.
//
// Extra fields are stored in a special "extra" storage, which can only
// be accessed via `Get()` and `Set()` methods.
func (v *EnterpriseUser) UnmarshalJSON(data []byte) error {
	v.mu.Lock()
	defer v.mu.Unlock()
	v.costCenter = nil
	v.department = nil
	v.division = nil
	v.employeeNumber = nil
	v.manager = nil
	v.organization = nil
	v.schemas = nil

	dec := json.NewDecoder(bytes.NewReader(data))
	var extra map[string]interface{}

LOOP:
	for {
		tok, err := dec.Token()
		if err != nil {
			return fmt.Errorf(`error reading JSON token: %w`, err)
		}
		switch tok := tok.(type) {
		case json.Delim:
			if tok == '}' { // end of object
				break LOOP
			}
			// we should only get into this clause at the very beginning, and just once
			if tok != '{' {
				return fmt.Errorf(`expected '{', but got '%c'`, tok)
			}
		case string:
			switch tok {
			case EnterpriseUserCostCenterKey:
				var val string
				if err := dec.Decode(&val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, EnterpriseUserCostCenterKey, err)
				}
				v.costCenter = &val
			case EnterpriseUserDepartmentKey:
				var val string
				if err := dec.Decode(&val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, EnterpriseUserDepartmentKey, err)
				}
				v.department = &val
			case EnterpriseUserDivisionKey:
				var val string
				if err := dec.Decode(&val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, EnterpriseUserDivisionKey, err)
				}
				v.division = &val
			case EnterpriseUserEmployeeNumberKey:
				var val string
				if err := dec.Decode(&val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, EnterpriseUserEmployeeNumberKey, err)
				}
				v.employeeNumber = &val
			case EnterpriseUserManagerKey:
				var val EnterpriseManager
				if err := dec.Decode(&val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, EnterpriseUserManagerKey, err)
				}
				v.manager = &val
			case EnterpriseUserOrganizationKey:
				var val string
				if err := dec.Decode(&val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, EnterpriseUserOrganizationKey, err)
				}
				v.organization = &val
			case EnterpriseUserSchemasKey:
				var val schemas
				if err := dec.Decode(&val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, EnterpriseUserSchemasKey, err)
				}
				v.schemas = &val
			default:
				var val interface{}
				if err := v.decodeExtraField(tok, dec, &val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, tok, err)
				}
				if extra == nil {
					extra = make(map[string]interface{})
				}
				extra[tok] = val
			}
		}
	}

	if extra != nil {
		v.extra = extra
	}
	return nil
}

type EnterpriseUserBuilder struct {
	mu     sync.Mutex
	err    error
	once   sync.Once
	object *EnterpriseUser
}

// NewEnterpriseUserBuilder creates a new EnterpriseUserBuilder instance.
// EnterpriseUserBuilder is safe to be used uninitialized as well.
func NewEnterpriseUserBuilder() *EnterpriseUserBuilder {
	return &EnterpriseUserBuilder{}
}

func (b *EnterpriseUserBuilder) initialize() {
	b.err = nil
	b.object = &EnterpriseUser{}
}
func (b *EnterpriseUserBuilder) CostCenter(in string) *EnterpriseUserBuilder {
	return b.SetField(EnterpriseUserCostCenterKey, in)
}
func (b *EnterpriseUserBuilder) Department(in string) *EnterpriseUserBuilder {
	return b.SetField(EnterpriseUserDepartmentKey, in)
}
func (b *EnterpriseUserBuilder) Division(in string) *EnterpriseUserBuilder {
	return b.SetField(EnterpriseUserDivisionKey, in)
}
func (b *EnterpriseUserBuilder) EmployeeNumber(in string) *EnterpriseUserBuilder {
	return b.SetField(EnterpriseUserEmployeeNumberKey, in)
}
func (b *EnterpriseUserBuilder) Manager(in *EnterpriseManager) *EnterpriseUserBuilder {
	return b.SetField(EnterpriseUserManagerKey, in)
}
func (b *EnterpriseUserBuilder) Organization(in string) *EnterpriseUserBuilder {
	return b.SetField(EnterpriseUserOrganizationKey, in)
}
func (b *EnterpriseUserBuilder) Schemas(in ...string) *EnterpriseUserBuilder {
	return b.SetField(EnterpriseUserSchemasKey, in)
}

// SetField sets the value of any field. The name should be the JSON field name.
// Type check will only be performed for pre-defined types
func (b *EnterpriseUserBuilder) SetField(name string, value interface{}) *EnterpriseUserBuilder {
	b.mu.Lock()
	defer b.mu.Unlock()

	b.once.Do(b.initialize)
	if b.err != nil {
		return b
	}

	if err := b.object.Set(name, value); err != nil {
		b.err = err
	}
	return b
}
func (b *EnterpriseUserBuilder) Build() (*EnterpriseUser, error) {
	b.mu.Lock()
	defer b.mu.Unlock()

	b.once.Do(b.initialize)
	if b.err != nil {
		return nil, b.err
	}
	obj := b.object
	b.once = sync.Once{}
	b.once.Do(b.initialize)
	return obj, nil
}
func (b *EnterpriseUserBuilder) MustBuild() *EnterpriseUser {
	object, err := b.Build()
	if err != nil {
		panic(err)
	}
	return object
}

func (b *EnterpriseUserBuilder) From(in *EnterpriseUser) *EnterpriseUserBuilder {
	b.mu.Lock()
	defer b.mu.Unlock()
	b.once.Do(b.initialize)
	if b.err != nil {
		return b
	}

	var cloned EnterpriseUser
	if err := in.Clone(&cloned); err != nil {
		b.err = err
		return b
	}

	b.object = &cloned
	return b
}

func (b *EnterpriseUserBuilder) Extension(uri string, value interface{}) *EnterpriseUserBuilder {
	b.mu.Lock()
	defer b.mu.Unlock()
	b.once.Do(b.initialize)
	if b.err != nil {
		return b
	}
	if b.object.schemas == nil {
		b.object.schemas = &schemas{}
		b.object.schemas.Add(EnterpriseUserSchemaURI)
	}
	b.object.schemas.Add(uri)
	if err := b.object.Set(uri, value); err != nil {
		b.err = err
	}
	return b
}

// AsMap returns the resource as a Go map
func (v *EnterpriseUser) AsMap(m map[string]interface{}) error {
	v.mu.RLock()
	defer v.mu.RUnlock()

	for _, key := range v.Keys() {
		var val interface{}
		if err := v.getNoLock(key, &val, false); err != nil {
			m[key] = val
		}
	}
	return nil
}

// GetExtension takes into account extension uri, and fetches
// the specified attribute from the extension object
func (v *EnterpriseUser) GetExtension(name, uri string, dst interface{}) error {
	if uri == "" {
		return v.Get(name, dst)
	}
	var ext interface{}
	if err := v.Get(uri, &ext); err != nil {
		return fmt.Errorf(`failed to fetch extension %q: %w`, uri, err)
	}

	getter, ok := ext.(interface {
		Get(string, interface{}) error
	})
	if !ok {
		return fmt.Errorf(`extension does not implement Get(string, interface{}) error`)
	}
	return getter.Get(name, dst)
}

func (*EnterpriseUser) decodeExtraField(name string, dec *json.Decoder, dst interface{}) error {
	// we can get an instance of the resource object
	if rx, ok := registry.LookupByURI(name); ok {
		if err := dec.Decode(&rx); err != nil {
			return fmt.Errorf(`failed to decode value for key %q: %w`, name, err)
		}
		if err := blackmagic.AssignIfCompatible(dst, rx); err != nil {
			return err
		}
	} else {
		if err := dec.Decode(dst); err != nil {
			return fmt.Errorf(`failed to decode value for key %q: %w`, name, err)
		}
	}
	return nil
}

func (b *Builder) EnterpriseUser() *EnterpriseUserBuilder {
	return &EnterpriseUserBuilder{}
}
