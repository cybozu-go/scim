// Generated by "sketch" utility. DO NOT EDIT
package resource

import (
	"bytes"
	"encoding/json"
	"fmt"
	"sort"
	"sync"

	"github.com/lestrrat-go/blackmagic"
)

const ResourceTypeSchemaURI = "urn:ietf:params:scim:schemas:core:2.0:ResourceType"

func init() {
	Register("ResourceType", ResourceTypeSchemaURI, ResourceType{})
	RegisterBuilder("ResourceType", ResourceTypeSchemaURI, ResourceTypeBuilder{})
}

type ResourceType struct {
	mu               sync.RWMutex
	description      *string
	endpoint         *string
	id               *string
	name             *string
	schema           *string
	schemaExtensions []*SchemaExtension
	schemas          *schemas
	extra            map[string]interface{}
}

// These constants are used when the JSON field name is used.
// Their use is not strictly required, but certain linters
// complain about repeated constants, and therefore internally
// this used throughout
const (
	ResourceTypeDescriptionKey      = "description"
	ResourceTypeEndpointKey         = "endpoint"
	ResourceTypeIDKey               = "id"
	ResourceTypeNameKey             = "name"
	ResourceTypeSchemaKey           = "schema"
	ResourceTypeSchemaExtensionsKey = "schemaExtensions"
	ResourceTypeSchemasKey          = "schemas"
)

// Get retrieves the value associated with a key
func (v *ResourceType) Get(key string, dst interface{}) error {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.getNoLock(key, dst, false)
}

// getNoLock is a utility method that is called from Get, MarshalJSON, etc, but
// it can be used from user-supplied code. Unlike Get, it avoids locking for
// each call, so the user needs to explicitly lock the object before using,
// but otherwise should be faster than sing Get directly
func (v *ResourceType) getNoLock(key string, dst interface{}, raw bool) error {
	switch key {
	case ResourceTypeDescriptionKey:
		if val := v.description; val != nil {
			return blackmagic.AssignIfCompatible(dst, *val)
		}
	case ResourceTypeEndpointKey:
		if val := v.endpoint; val != nil {
			return blackmagic.AssignIfCompatible(dst, *val)
		}
	case ResourceTypeIDKey:
		if val := v.id; val != nil {
			return blackmagic.AssignIfCompatible(dst, *val)
		}
	case ResourceTypeNameKey:
		if val := v.name; val != nil {
			return blackmagic.AssignIfCompatible(dst, *val)
		}
	case ResourceTypeSchemaKey:
		if val := v.schema; val != nil {
			return blackmagic.AssignIfCompatible(dst, *val)
		}
	case ResourceTypeSchemaExtensionsKey:
		if val := v.schemaExtensions; val != nil {
			return blackmagic.AssignIfCompatible(dst, val)
		}
	case ResourceTypeSchemasKey:
		if val := v.schemas; val != nil {
			if raw {
				return blackmagic.AssignIfCompatible(dst, val)
			}
			return blackmagic.AssignIfCompatible(dst, val.GetValue())
		}
	default:
		if v.extra != nil {
			val, ok := v.extra[key]
			if ok {
				return blackmagic.AssignIfCompatible(dst, val)
			}
		}
	}
	return fmt.Errorf(`no such key %q`, key)
}

// Set sets the value of the specified field. The name must be a JSON
// field name, not the Go name
func (v *ResourceType) Set(key string, value interface{}) error {
	v.mu.Lock()
	defer v.mu.Unlock()
	switch key {
	case ResourceTypeDescriptionKey:
		converted, ok := value.(string)
		if !ok {
			return fmt.Errorf(`expected value of type string for field description, got %T`, value)
		}
		v.description = &converted
	case ResourceTypeEndpointKey:
		converted, ok := value.(string)
		if !ok {
			return fmt.Errorf(`expected value of type string for field endpoint, got %T`, value)
		}
		v.endpoint = &converted
	case ResourceTypeIDKey:
		converted, ok := value.(string)
		if !ok {
			return fmt.Errorf(`expected value of type string for field id, got %T`, value)
		}
		v.id = &converted
	case ResourceTypeNameKey:
		converted, ok := value.(string)
		if !ok {
			return fmt.Errorf(`expected value of type string for field name, got %T`, value)
		}
		v.name = &converted
	case ResourceTypeSchemaKey:
		converted, ok := value.(string)
		if !ok {
			return fmt.Errorf(`expected value of type string for field schema, got %T`, value)
		}
		v.schema = &converted
	case ResourceTypeSchemaExtensionsKey:
		converted, ok := value.([]*SchemaExtension)
		if !ok {
			return fmt.Errorf(`expected value of type []*SchemaExtension for field schemaExtensions, got %T`, value)
		}
		v.schemaExtensions = converted
	case ResourceTypeSchemasKey:
		var object schemas
		if err := object.AcceptValue(value); err != nil {
			return fmt.Errorf(`failed to accept value: %w`, err)
		}
		v.schemas = &object
	default:
		if v.extra == nil {
			v.extra = make(map[string]interface{})
		}
		v.extra[key] = value
	}
	return nil
}

// Has returns true if the field specified by the argument has been populated.
// The field name must be the JSON field name, not the Go-structure's field name.
func (v *ResourceType) Has(name string) bool {
	switch name {
	case ResourceTypeDescriptionKey:
		return v.description != nil
	case ResourceTypeEndpointKey:
		return v.endpoint != nil
	case ResourceTypeIDKey:
		return v.id != nil
	case ResourceTypeNameKey:
		return v.name != nil
	case ResourceTypeSchemaKey:
		return v.schema != nil
	case ResourceTypeSchemaExtensionsKey:
		return v.schemaExtensions != nil
	case ResourceTypeSchemasKey:
		return v.schemas != nil
	default:
		if v.extra != nil {
			if _, ok := v.extra[name]; ok {
				return true
			}
		}
		return false
	}
}

// Keys returns a slice of string comprising of JSON field names whose values
// are present in the object.
func (v *ResourceType) Keys() []string {
	keys := make([]string, 0, 7)
	if v.description != nil {
		keys = append(keys, ResourceTypeDescriptionKey)
	}
	if v.endpoint != nil {
		keys = append(keys, ResourceTypeEndpointKey)
	}
	if v.id != nil {
		keys = append(keys, ResourceTypeIDKey)
	}
	if v.name != nil {
		keys = append(keys, ResourceTypeNameKey)
	}
	if v.schema != nil {
		keys = append(keys, ResourceTypeSchemaKey)
	}
	if v.schemaExtensions != nil {
		keys = append(keys, ResourceTypeSchemaExtensionsKey)
	}
	if v.schemas != nil {
		keys = append(keys, ResourceTypeSchemasKey)
	}

	if len(v.extra) > 0 {
		for k := range v.extra {
			keys = append(keys, k)
		}
	}
	sort.Strings(keys)
	return keys
}

// HasDescription returns true if the field `description` has been populated
func (v *ResourceType) HasDescription() bool {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.description != nil
}

// HasEndpoint returns true if the field `endpoint` has been populated
func (v *ResourceType) HasEndpoint() bool {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.endpoint != nil
}

// HasID returns true if the field `id` has been populated
func (v *ResourceType) HasID() bool {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.id != nil
}

// HasName returns true if the field `name` has been populated
func (v *ResourceType) HasName() bool {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.name != nil
}

// HasSchema returns true if the field `schema` has been populated
func (v *ResourceType) HasSchema() bool {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.schema != nil
}

// HasSchemaExtensions returns true if the field `schemaExtensions` has been populated
func (v *ResourceType) HasSchemaExtensions() bool {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.schemaExtensions != nil
}

// HasSchemas returns true if the field `schemas` has been populated
func (v *ResourceType) HasSchemas() bool {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.schemas != nil
}

func (v *ResourceType) Description() string {
	v.mu.RLock()
	defer v.mu.RUnlock()
	if val := v.description; val != nil {
		return *val
	}
	return ""
}

func (v *ResourceType) Endpoint() string {
	v.mu.RLock()
	defer v.mu.RUnlock()
	if val := v.endpoint; val != nil {
		return *val
	}
	return ""
}

func (v *ResourceType) ID() string {
	v.mu.RLock()
	defer v.mu.RUnlock()
	if val := v.id; val != nil {
		return *val
	}
	return ""
}

func (v *ResourceType) Name() string {
	v.mu.RLock()
	defer v.mu.RUnlock()
	if val := v.name; val != nil {
		return *val
	}
	return ""
}

func (v *ResourceType) Schema() string {
	v.mu.RLock()
	defer v.mu.RUnlock()
	if val := v.schema; val != nil {
		return *val
	}
	return ""
}

func (v *ResourceType) SchemaExtensions() []*SchemaExtension {
	v.mu.RLock()
	defer v.mu.RUnlock()
	if val := v.schemaExtensions; val != nil {
		return val
	}
	return nil
}

func (v *ResourceType) Schemas() []string {
	v.mu.RLock()
	defer v.mu.RUnlock()
	if val := v.schemas; val != nil {
		return val.GetValue()
	}
	return nil
}

// Remove removes the value associated with a key
func (v *ResourceType) Remove(key string) error {
	v.mu.Lock()
	defer v.mu.Unlock()

	switch key {
	case ResourceTypeDescriptionKey:
		v.description = nil
	case ResourceTypeEndpointKey:
		v.endpoint = nil
	case ResourceTypeIDKey:
		v.id = nil
	case ResourceTypeNameKey:
		v.name = nil
	case ResourceTypeSchemaKey:
		v.schema = nil
	case ResourceTypeSchemaExtensionsKey:
		v.schemaExtensions = nil
	case ResourceTypeSchemasKey:
		v.schemas = nil
	default:
		delete(v.extra, key)
	}

	return nil
}

func (v *ResourceType) Clone(dst interface{}) error {
	v.mu.RLock()
	defer v.mu.RUnlock()

	extra := make(map[string]interface{})
	for key, val := range v.extra {
		extra[key] = val
	}
	return blackmagic.AssignIfCompatible(dst, &ResourceType{
		description:      v.description,
		endpoint:         v.endpoint,
		id:               v.id,
		name:             v.name,
		schema:           v.schema,
		schemaExtensions: v.schemaExtensions,
		schemas:          v.schemas,
		extra:            extra,
	})
}

// MarshalJSON serializes ResourceType into JSON.
// All pre-declared fields are included as long as a value is
// assigned to them, as well as all extra fields. All of these
// fields are sorted in alphabetical order.
func (v *ResourceType) MarshalJSON() ([]byte, error) {
	v.mu.RLock()
	defer v.mu.RUnlock()

	var buf bytes.Buffer
	enc := json.NewEncoder(&buf)
	buf.WriteByte('{')
	for i, k := range v.Keys() {
		var val interface{}
		if err := v.getNoLock(k, &val, true); err != nil {
			return nil, fmt.Errorf(`failed to retrieve value for field %q: %w`, k, err)
		}

		if i > 0 {
			buf.WriteByte(',')
		}
		if err := enc.Encode(k); err != nil {
			return nil, fmt.Errorf(`failed to encode map key name: %w`, err)
		}
		buf.WriteByte(':')
		if err := enc.Encode(val); err != nil {
			return nil, fmt.Errorf(`failed to encode map value for %q: %w`, k, err)
		}
	}
	buf.WriteByte('}')
	return buf.Bytes(), nil
}

// UnmarshalJSON deserializes a piece of JSON data into ResourceType.
//
// Pre-defined fields must be deserializable via "encoding/json" to their
// respective Go types, otherwise an error is returned.
//
// Extra fields are stored in a special "extra" storage, which can only
// be accessed via `Get()` and `Set()` methods.
func (v *ResourceType) UnmarshalJSON(data []byte) error {
	v.mu.Lock()
	defer v.mu.Unlock()
	v.description = nil
	v.endpoint = nil
	v.id = nil
	v.name = nil
	v.schema = nil
	v.schemaExtensions = nil
	v.schemas = nil

	dec := json.NewDecoder(bytes.NewReader(data))
	var extra map[string]interface{}

LOOP:
	for {
		tok, err := dec.Token()
		if err != nil {
			return fmt.Errorf(`error reading JSON token: %w`, err)
		}
		switch tok := tok.(type) {
		case json.Delim:
			if tok == '}' { // end of object
				break LOOP
			}
			// we should only get into this clause at the very beginning, and just once
			if tok != '{' {
				return fmt.Errorf(`expected '{', but got '%c'`, tok)
			}
		case string:
			switch tok {
			case ResourceTypeDescriptionKey:
				var val string
				if err := dec.Decode(&val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, ResourceTypeDescriptionKey, err)
				}
				v.description = &val
			case ResourceTypeEndpointKey:
				var val string
				if err := dec.Decode(&val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, ResourceTypeEndpointKey, err)
				}
				v.endpoint = &val
			case ResourceTypeIDKey:
				var val string
				if err := dec.Decode(&val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, ResourceTypeIDKey, err)
				}
				v.id = &val
			case ResourceTypeNameKey:
				var val string
				if err := dec.Decode(&val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, ResourceTypeNameKey, err)
				}
				v.name = &val
			case ResourceTypeSchemaKey:
				var val string
				if err := dec.Decode(&val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, ResourceTypeSchemaKey, err)
				}
				v.schema = &val
			case ResourceTypeSchemaExtensionsKey:
				var val []*SchemaExtension
				if err := dec.Decode(&val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, ResourceTypeSchemaExtensionsKey, err)
				}
				v.schemaExtensions = val
			case ResourceTypeSchemasKey:
				var val schemas
				if err := dec.Decode(&val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, ResourceTypeSchemasKey, err)
				}
				v.schemas = &val
			default:
				var val interface{}
				if err := v.decodeExtraField(tok, dec, &val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, tok, err)
				}
				if extra == nil {
					extra = make(map[string]interface{})
				}
				extra[tok] = val
			}
		}
	}
	if v.endpoint == nil {
		return fmt.Errorf(`required field endpoint is missing for object ResourceType`)
	}
	if v.name == nil {
		return fmt.Errorf(`required field name is missing for object ResourceType`)
	}
	if v.schema == nil {
		return fmt.Errorf(`required field schema is missing for object ResourceType`)
	}

	if extra != nil {
		v.extra = extra
	}
	return nil
}

type ResourceTypeBuilder struct {
	mu     sync.Mutex
	err    error
	once   sync.Once
	object *ResourceType
}

// NewResourceTypeBuilder creates a new ResourceTypeBuilder instance.
// ResourceTypeBuilder is safe to be used uninitialized as well.
func NewResourceTypeBuilder() *ResourceTypeBuilder {
	return &ResourceTypeBuilder{}
}
func (b *ResourceTypeBuilder) initialize() {
	b.err = nil
	b.object = &ResourceType{}
	b.object.schemas = &schemas{}
	b.object.schemas.Add(ResourceTypeSchemaURI)
}
func (b *ResourceTypeBuilder) Description(in string) *ResourceTypeBuilder {
	return b.SetField(ResourceTypeDescriptionKey, in)
}
func (b *ResourceTypeBuilder) Endpoint(in string) *ResourceTypeBuilder {
	return b.SetField(ResourceTypeEndpointKey, in)
}
func (b *ResourceTypeBuilder) ID(in string) *ResourceTypeBuilder {
	return b.SetField(ResourceTypeIDKey, in)
}
func (b *ResourceTypeBuilder) Name(in string) *ResourceTypeBuilder {
	return b.SetField(ResourceTypeNameKey, in)
}
func (b *ResourceTypeBuilder) Schema(in string) *ResourceTypeBuilder {
	return b.SetField(ResourceTypeSchemaKey, in)
}
func (b *ResourceTypeBuilder) SchemaExtensions(in ...*SchemaExtension) *ResourceTypeBuilder {
	return b.SetField(ResourceTypeSchemaExtensionsKey, in)
}
func (b *ResourceTypeBuilder) Schemas(in ...string) *ResourceTypeBuilder {
	return b.SetField(ResourceTypeSchemasKey, in)
}

// SetField sets the value of any field. The name should be the JSON field name.
// Type check will only be performed for pre-defined types
func (b *ResourceTypeBuilder) SetField(name string, value interface{}) *ResourceTypeBuilder {
	b.mu.Lock()
	defer b.mu.Unlock()

	b.once.Do(b.initialize)
	if b.err != nil {
		return b
	}

	if err := b.object.Set(name, value); err != nil {
		b.err = err
	}
	return b
}
func (b *ResourceTypeBuilder) Build() (*ResourceType, error) {
	b.mu.Lock()
	defer b.mu.Unlock()

	b.once.Do(b.initialize)
	if b.err != nil {
		return nil, b.err
	}
	if b.object.endpoint == nil {
		return nil, fmt.Errorf("required field 'Endpoint' not initialized")
	}
	if b.object.name == nil {
		return nil, fmt.Errorf("required field 'Name' not initialized")
	}
	if b.object.schema == nil {
		return nil, fmt.Errorf("required field 'Schema' not initialized")
	}
	obj := b.object
	b.once = sync.Once{}
	b.once.Do(b.initialize)
	return obj, nil
}
func (b *ResourceTypeBuilder) MustBuild() *ResourceType {
	object, err := b.Build()
	if err != nil {
		panic(err)
	}
	return object
}

func (b *ResourceTypeBuilder) From(in *ResourceType) *ResourceTypeBuilder {
	b.mu.Lock()
	defer b.mu.Unlock()
	b.once.Do(b.initialize)
	if b.err != nil {
		return b
	}

	var cloned ResourceType
	if err := in.Clone(&cloned); err != nil {
		b.err = err
		return b
	}

	b.object = &cloned
	return b
}

func (b *ResourceTypeBuilder) Extension(uri string, value interface{}) *ResourceTypeBuilder {
	b.mu.Lock()
	defer b.mu.Unlock()
	b.once.Do(b.initialize)
	if b.err != nil {
		return b
	}
	if b.object.schemas == nil {
		b.object.schemas = &schemas{}
		b.object.schemas.Add(ResourceTypeSchemaURI)
	}
	b.object.schemas.Add(uri)
	if err := b.object.Set(uri, value); err != nil {
		b.err = err
	}
	return b
}

// AsMap returns the resource as a Go map
func (v *ResourceType) AsMap(m map[string]interface{}) error {
	v.mu.RLock()
	defer v.mu.RUnlock()

	for _, key := range v.Keys() {
		var val interface{}
		if err := v.getNoLock(key, &val, false); err != nil {
			return fmt.Errorf(`failed to retrieve value for key %q: %w`, key, err)
		}
		m[key] = val
	}
	return nil
}

// GetExtension takes into account extension uri, and fetches
// the specified attribute from the extension object
func (v *ResourceType) GetExtension(name, uri string, dst interface{}) error {
	if uri == "" {
		return v.Get(name, dst)
	}
	var ext interface{}
	if err := v.Get(uri, &ext); err != nil {
		return fmt.Errorf(`failed to fetch extension %q: %w`, uri, err)
	}

	getter, ok := ext.(interface {
		Get(string, interface{}) error
	})
	if !ok {
		return fmt.Errorf(`extension does not implement Get(string, interface{}) error`)
	}
	return getter.Get(name, dst)
}

func (*ResourceType) decodeExtraField(name string, dec *json.Decoder, dst interface{}) error {
	// we can get an instance of the resource object
	if rx, ok := registry.LookupByURI(name); ok {
		if err := dec.Decode(&rx); err != nil {
			return fmt.Errorf(`failed to decode value for key %q: %w`, name, err)
		}
		if err := blackmagic.AssignIfCompatible(dst, rx); err != nil {
			return err
		}
	} else {
		if err := dec.Decode(dst); err != nil {
			return fmt.Errorf(`failed to decode value for key %q: %w`, name, err)
		}
	}
	return nil
}

func (b *Builder) ResourceType() *ResourceTypeBuilder {
	return &ResourceTypeBuilder{}
}
