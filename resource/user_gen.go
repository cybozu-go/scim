// Generated by "sketch" utility. DO NOT EDIT
package resource

import (
	"bytes"
	"encoding/json"
	"fmt"
	"sort"
	"sync"

	"github.com/lestrrat-go/blackmagic"
)

const UserSchemaURI = "urn:ietf:params:scim:schemas:core:2.0:User"

func init() {
	Register("User", UserSchemaURI, User{})
	RegisterBuilder("User", UserSchemaURI, UserBuilder{})
}

// represents a User resource as defined in the SCIM RFC
type User struct {
	mu                sync.RWMutex
	active            *bool
	addresses         []*Address
	displayName       *string
	emails            []*Email
	entitlements      []*Entitlement
	externalID        *string
	groups            []*AssociatedGroup
	id                *string
	ims               []*IMS
	locale            *string
	meta              *Meta
	name              *Names
	nickName          *string
	password          *string
	phoneNumbers      []*PhoneNumber
	photos            []*Photo
	preferredLanguage *string
	profileURL        *string
	roles             []*Role
	schemas           *schemas
	timezone          *string
	title             *string
	userName          *string
	userType          *string
	x509Certificates  []*X509Certificate
	extra             map[string]interface{}
}

// These constants are used when the JSON field name is used.
// Their use is not strictly required, but certain linters
// complain about repeated constants, and therefore internally
// this used throughout
const (
	UserActiveKey            = "active"
	UserAddressesKey         = "addresses"
	UserDisplayNameKey       = "displayName"
	UserEmailsKey            = "emails"
	UserEntitlementsKey      = "entitlements"
	UserExternalIDKey        = "externalId"
	UserGroupsKey            = "groups"
	UserIDKey                = "id"
	UserIMSKey               = "ims"
	UserLocaleKey            = "locale"
	UserMetaKey              = "meta"
	UserNameKey              = "name"
	UserNickNameKey          = "nickName"
	UserPasswordKey          = "password"
	UserPhoneNumbersKey      = "phoneNumbers"
	UserPhotosKey            = "photos"
	UserPreferredLanguageKey = "preferredLanguage"
	UserProfileURLKey        = "profileUrl"
	UserRolesKey             = "roles"
	UserSchemasKey           = "schemas"
	UserTimezoneKey          = "timezone"
	UserTitleKey             = "title"
	UserUserNameKey          = "userName"
	UserUserTypeKey          = "userType"
	UserX509CertificatesKey  = "x509Certificates"
)

// Get retrieves the value associated with a key
func (v *User) Get(key string, dst interface{}) error {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.getNoLock(key, dst, false)
}

// getNoLock is a utility method that is called from Get, MarshalJSON, etc, but
// it can be used from user-supplied code. Unlike Get, it avoids locking for
// each call, so the user needs to explicitly lock the object before using,
// but otherwise should be faster than sing Get directly
func (v *User) getNoLock(key string, dst interface{}, raw bool) error {
	switch key {
	case UserActiveKey:
		if val := v.active; val != nil {
			return blackmagic.AssignIfCompatible(dst, *val)
		}
	case UserAddressesKey:
		if val := v.addresses; val != nil {
			return blackmagic.AssignIfCompatible(dst, val)
		}
	case UserDisplayNameKey:
		if val := v.displayName; val != nil {
			return blackmagic.AssignIfCompatible(dst, *val)
		}
	case UserEmailsKey:
		if val := v.emails; val != nil {
			return blackmagic.AssignIfCompatible(dst, val)
		}
	case UserEntitlementsKey:
		if val := v.entitlements; val != nil {
			return blackmagic.AssignIfCompatible(dst, val)
		}
	case UserExternalIDKey:
		if val := v.externalID; val != nil {
			return blackmagic.AssignIfCompatible(dst, *val)
		}
	case UserGroupsKey:
		if val := v.groups; val != nil {
			return blackmagic.AssignIfCompatible(dst, val)
		}
	case UserIDKey:
		if val := v.id; val != nil {
			return blackmagic.AssignIfCompatible(dst, *val)
		}
	case UserIMSKey:
		if val := v.ims; val != nil {
			return blackmagic.AssignIfCompatible(dst, val)
		}
	case UserLocaleKey:
		if val := v.locale; val != nil {
			return blackmagic.AssignIfCompatible(dst, *val)
		}
	case UserMetaKey:
		if val := v.meta; val != nil {
			return blackmagic.AssignIfCompatible(dst, val)
		}
	case UserNameKey:
		if val := v.name; val != nil {
			return blackmagic.AssignIfCompatible(dst, val)
		}
	case UserNickNameKey:
		if val := v.nickName; val != nil {
			return blackmagic.AssignIfCompatible(dst, *val)
		}
	case UserPasswordKey:
		if val := v.password; val != nil {
			return blackmagic.AssignIfCompatible(dst, *val)
		}
	case UserPhoneNumbersKey:
		if val := v.phoneNumbers; val != nil {
			return blackmagic.AssignIfCompatible(dst, val)
		}
	case UserPhotosKey:
		if val := v.photos; val != nil {
			return blackmagic.AssignIfCompatible(dst, val)
		}
	case UserPreferredLanguageKey:
		if val := v.preferredLanguage; val != nil {
			return blackmagic.AssignIfCompatible(dst, *val)
		}
	case UserProfileURLKey:
		if val := v.profileURL; val != nil {
			return blackmagic.AssignIfCompatible(dst, *val)
		}
	case UserRolesKey:
		if val := v.roles; val != nil {
			return blackmagic.AssignIfCompatible(dst, val)
		}
	case UserSchemasKey:
		if val := v.schemas; val != nil {
			if raw {
				return blackmagic.AssignIfCompatible(dst, val)
			}
			return blackmagic.AssignIfCompatible(dst, val.GetValue())
		}
	case UserTimezoneKey:
		if val := v.timezone; val != nil {
			return blackmagic.AssignIfCompatible(dst, *val)
		}
	case UserTitleKey:
		if val := v.title; val != nil {
			return blackmagic.AssignIfCompatible(dst, *val)
		}
	case UserUserNameKey:
		if val := v.userName; val != nil {
			return blackmagic.AssignIfCompatible(dst, *val)
		}
	case UserUserTypeKey:
		if val := v.userType; val != nil {
			return blackmagic.AssignIfCompatible(dst, *val)
		}
	case UserX509CertificatesKey:
		if val := v.x509Certificates; val != nil {
			return blackmagic.AssignIfCompatible(dst, val)
		}
	default:
		if v.extra != nil {
			val, ok := v.extra[key]
			if ok {
				return blackmagic.AssignIfCompatible(dst, val)
			}
		}
	}
	return fmt.Errorf(`no such key %q`, key)
}

// Set sets the value of the specified field. The name must be a JSON
// field name, not the Go name
func (v *User) Set(key string, value interface{}) error {
	v.mu.Lock()
	defer v.mu.Unlock()
	switch key {
	case UserActiveKey:
		converted, ok := value.(bool)
		if !ok {
			return fmt.Errorf(`expected value of type bool for field active, got %T`, value)
		}
		v.active = &converted
	case UserAddressesKey:
		converted, ok := value.([]*Address)
		if !ok {
			return fmt.Errorf(`expected value of type []*Address for field addresses, got %T`, value)
		}
		v.addresses = converted
	case UserDisplayNameKey:
		converted, ok := value.(string)
		if !ok {
			return fmt.Errorf(`expected value of type string for field displayName, got %T`, value)
		}
		v.displayName = &converted
	case UserEmailsKey:
		converted, ok := value.([]*Email)
		if !ok {
			return fmt.Errorf(`expected value of type []*Email for field emails, got %T`, value)
		}
		v.emails = converted
	case UserEntitlementsKey:
		converted, ok := value.([]*Entitlement)
		if !ok {
			return fmt.Errorf(`expected value of type []*Entitlement for field entitlements, got %T`, value)
		}
		v.entitlements = converted
	case UserExternalIDKey:
		converted, ok := value.(string)
		if !ok {
			return fmt.Errorf(`expected value of type string for field externalId, got %T`, value)
		}
		v.externalID = &converted
	case UserGroupsKey:
		converted, ok := value.([]*AssociatedGroup)
		if !ok {
			return fmt.Errorf(`expected value of type []*AssociatedGroup for field groups, got %T`, value)
		}
		v.groups = converted
	case UserIDKey:
		converted, ok := value.(string)
		if !ok {
			return fmt.Errorf(`expected value of type string for field id, got %T`, value)
		}
		v.id = &converted
	case UserIMSKey:
		converted, ok := value.([]*IMS)
		if !ok {
			return fmt.Errorf(`expected value of type []*IMS for field ims, got %T`, value)
		}
		v.ims = converted
	case UserLocaleKey:
		converted, ok := value.(string)
		if !ok {
			return fmt.Errorf(`expected value of type string for field locale, got %T`, value)
		}
		v.locale = &converted
	case UserMetaKey:
		converted, ok := value.(*Meta)
		if !ok {
			return fmt.Errorf(`expected value of type *Meta for field meta, got %T`, value)
		}
		v.meta = converted
	case UserNameKey:
		converted, ok := value.(*Names)
		if !ok {
			return fmt.Errorf(`expected value of type *Names for field name, got %T`, value)
		}
		v.name = converted
	case UserNickNameKey:
		converted, ok := value.(string)
		if !ok {
			return fmt.Errorf(`expected value of type string for field nickName, got %T`, value)
		}
		v.nickName = &converted
	case UserPasswordKey:
		converted, ok := value.(string)
		if !ok {
			return fmt.Errorf(`expected value of type string for field password, got %T`, value)
		}
		v.password = &converted
	case UserPhoneNumbersKey:
		converted, ok := value.([]*PhoneNumber)
		if !ok {
			return fmt.Errorf(`expected value of type []*PhoneNumber for field phoneNumbers, got %T`, value)
		}
		v.phoneNumbers = converted
	case UserPhotosKey:
		converted, ok := value.([]*Photo)
		if !ok {
			return fmt.Errorf(`expected value of type []*Photo for field photos, got %T`, value)
		}
		v.photos = converted
	case UserPreferredLanguageKey:
		converted, ok := value.(string)
		if !ok {
			return fmt.Errorf(`expected value of type string for field preferredLanguage, got %T`, value)
		}
		v.preferredLanguage = &converted
	case UserProfileURLKey:
		converted, ok := value.(string)
		if !ok {
			return fmt.Errorf(`expected value of type string for field profileUrl, got %T`, value)
		}
		v.profileURL = &converted
	case UserRolesKey:
		converted, ok := value.([]*Role)
		if !ok {
			return fmt.Errorf(`expected value of type []*Role for field roles, got %T`, value)
		}
		v.roles = converted
	case UserSchemasKey:
		var object schemas
		if err := object.AcceptValue(value); err != nil {
			return fmt.Errorf(`failed to accept value: %w`, err)
		}
		v.schemas = &object
	case UserTimezoneKey:
		converted, ok := value.(string)
		if !ok {
			return fmt.Errorf(`expected value of type string for field timezone, got %T`, value)
		}
		v.timezone = &converted
	case UserTitleKey:
		converted, ok := value.(string)
		if !ok {
			return fmt.Errorf(`expected value of type string for field title, got %T`, value)
		}
		v.title = &converted
	case UserUserNameKey:
		converted, ok := value.(string)
		if !ok {
			return fmt.Errorf(`expected value of type string for field userName, got %T`, value)
		}
		v.userName = &converted
	case UserUserTypeKey:
		converted, ok := value.(string)
		if !ok {
			return fmt.Errorf(`expected value of type string for field userType, got %T`, value)
		}
		v.userType = &converted
	case UserX509CertificatesKey:
		converted, ok := value.([]*X509Certificate)
		if !ok {
			return fmt.Errorf(`expected value of type []*X509Certificate for field x509Certificates, got %T`, value)
		}
		v.x509Certificates = converted
	default:
		if v.extra == nil {
			v.extra = make(map[string]interface{})
		}
		v.extra[key] = value
	}
	return nil
}

// Has returns true if the field specified by the argument has been populated.
// The field name must be the JSON field name, not the Go-structure's field name.
func (v *User) Has(name string) bool {
	switch name {
	case UserActiveKey:
		return v.active != nil
	case UserAddressesKey:
		return v.addresses != nil
	case UserDisplayNameKey:
		return v.displayName != nil
	case UserEmailsKey:
		return v.emails != nil
	case UserEntitlementsKey:
		return v.entitlements != nil
	case UserExternalIDKey:
		return v.externalID != nil
	case UserGroupsKey:
		return v.groups != nil
	case UserIDKey:
		return v.id != nil
	case UserIMSKey:
		return v.ims != nil
	case UserLocaleKey:
		return v.locale != nil
	case UserMetaKey:
		return v.meta != nil
	case UserNameKey:
		return v.name != nil
	case UserNickNameKey:
		return v.nickName != nil
	case UserPasswordKey:
		return v.password != nil
	case UserPhoneNumbersKey:
		return v.phoneNumbers != nil
	case UserPhotosKey:
		return v.photos != nil
	case UserPreferredLanguageKey:
		return v.preferredLanguage != nil
	case UserProfileURLKey:
		return v.profileURL != nil
	case UserRolesKey:
		return v.roles != nil
	case UserSchemasKey:
		return v.schemas != nil
	case UserTimezoneKey:
		return v.timezone != nil
	case UserTitleKey:
		return v.title != nil
	case UserUserNameKey:
		return v.userName != nil
	case UserUserTypeKey:
		return v.userType != nil
	case UserX509CertificatesKey:
		return v.x509Certificates != nil
	default:
		if v.extra != nil {
			if _, ok := v.extra[name]; ok {
				return true
			}
		}
		return false
	}
}

// Keys returns a slice of string comprising of JSON field names whose values
// are present in the object.
func (v *User) Keys() []string {
	keys := make([]string, 0, 25)
	if v.active != nil {
		keys = append(keys, UserActiveKey)
	}
	if v.addresses != nil {
		keys = append(keys, UserAddressesKey)
	}
	if v.displayName != nil {
		keys = append(keys, UserDisplayNameKey)
	}
	if v.emails != nil {
		keys = append(keys, UserEmailsKey)
	}
	if v.entitlements != nil {
		keys = append(keys, UserEntitlementsKey)
	}
	if v.externalID != nil {
		keys = append(keys, UserExternalIDKey)
	}
	if v.groups != nil {
		keys = append(keys, UserGroupsKey)
	}
	if v.id != nil {
		keys = append(keys, UserIDKey)
	}
	if v.ims != nil {
		keys = append(keys, UserIMSKey)
	}
	if v.locale != nil {
		keys = append(keys, UserLocaleKey)
	}
	if v.meta != nil {
		keys = append(keys, UserMetaKey)
	}
	if v.name != nil {
		keys = append(keys, UserNameKey)
	}
	if v.nickName != nil {
		keys = append(keys, UserNickNameKey)
	}
	if v.password != nil {
		keys = append(keys, UserPasswordKey)
	}
	if v.phoneNumbers != nil {
		keys = append(keys, UserPhoneNumbersKey)
	}
	if v.photos != nil {
		keys = append(keys, UserPhotosKey)
	}
	if v.preferredLanguage != nil {
		keys = append(keys, UserPreferredLanguageKey)
	}
	if v.profileURL != nil {
		keys = append(keys, UserProfileURLKey)
	}
	if v.roles != nil {
		keys = append(keys, UserRolesKey)
	}
	if v.schemas != nil {
		keys = append(keys, UserSchemasKey)
	}
	if v.timezone != nil {
		keys = append(keys, UserTimezoneKey)
	}
	if v.title != nil {
		keys = append(keys, UserTitleKey)
	}
	if v.userName != nil {
		keys = append(keys, UserUserNameKey)
	}
	if v.userType != nil {
		keys = append(keys, UserUserTypeKey)
	}
	if v.x509Certificates != nil {
		keys = append(keys, UserX509CertificatesKey)
	}

	if len(v.extra) > 0 {
		for k := range v.extra {
			keys = append(keys, k)
		}
	}
	sort.Strings(keys)
	return keys
}

// HasActive returns true if the field `active` has been populated
func (v *User) HasActive() bool {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.active != nil
}

// HasAddresses returns true if the field `addresses` has been populated
func (v *User) HasAddresses() bool {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.addresses != nil
}

// HasDisplayName returns true if the field `displayName` has been populated
func (v *User) HasDisplayName() bool {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.displayName != nil
}

// HasEmails returns true if the field `emails` has been populated
func (v *User) HasEmails() bool {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.emails != nil
}

// HasEntitlements returns true if the field `entitlements` has been populated
func (v *User) HasEntitlements() bool {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.entitlements != nil
}

// HasExternalID returns true if the field `externalId` has been populated
func (v *User) HasExternalID() bool {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.externalID != nil
}

// HasGroups returns true if the field `groups` has been populated
func (v *User) HasGroups() bool {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.groups != nil
}

// HasID returns true if the field `id` has been populated
func (v *User) HasID() bool {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.id != nil
}

// HasIMS returns true if the field `ims` has been populated
func (v *User) HasIMS() bool {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.ims != nil
}

// HasLocale returns true if the field `locale` has been populated
func (v *User) HasLocale() bool {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.locale != nil
}

// HasMeta returns true if the field `meta` has been populated
func (v *User) HasMeta() bool {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.meta != nil
}

// HasName returns true if the field `name` has been populated
func (v *User) HasName() bool {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.name != nil
}

// HasNickName returns true if the field `nickName` has been populated
func (v *User) HasNickName() bool {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.nickName != nil
}

// HasPassword returns true if the field `password` has been populated
func (v *User) HasPassword() bool {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.password != nil
}

// HasPhoneNumbers returns true if the field `phoneNumbers` has been populated
func (v *User) HasPhoneNumbers() bool {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.phoneNumbers != nil
}

// HasPhotos returns true if the field `photos` has been populated
func (v *User) HasPhotos() bool {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.photos != nil
}

// HasPreferredLanguage returns true if the field `preferredLanguage` has been populated
func (v *User) HasPreferredLanguage() bool {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.preferredLanguage != nil
}

// HasProfileURL returns true if the field `profileUrl` has been populated
func (v *User) HasProfileURL() bool {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.profileURL != nil
}

// HasRoles returns true if the field `roles` has been populated
func (v *User) HasRoles() bool {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.roles != nil
}

// HasSchemas returns true if the field `schemas` has been populated
func (v *User) HasSchemas() bool {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.schemas != nil
}

// HasTimezone returns true if the field `timezone` has been populated
func (v *User) HasTimezone() bool {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.timezone != nil
}

// HasTitle returns true if the field `title` has been populated
func (v *User) HasTitle() bool {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.title != nil
}

// HasUserName returns true if the field `userName` has been populated
func (v *User) HasUserName() bool {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.userName != nil
}

// HasUserType returns true if the field `userType` has been populated
func (v *User) HasUserType() bool {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.userType != nil
}

// HasX509Certificates returns true if the field `x509Certificates` has been populated
func (v *User) HasX509Certificates() bool {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.x509Certificates != nil
}

func (v *User) Active() bool {
	v.mu.RLock()
	defer v.mu.RUnlock()
	if val := v.active; val != nil {
		return *val
	}
	return false
}

func (v *User) Addresses() []*Address {
	v.mu.RLock()
	defer v.mu.RUnlock()
	if val := v.addresses; val != nil {
		return val
	}
	return nil
}

func (v *User) DisplayName() string {
	v.mu.RLock()
	defer v.mu.RUnlock()
	if val := v.displayName; val != nil {
		return *val
	}
	return ""
}

func (v *User) Emails() []*Email {
	v.mu.RLock()
	defer v.mu.RUnlock()
	if val := v.emails; val != nil {
		return val
	}
	return nil
}

func (v *User) Entitlements() []*Entitlement {
	v.mu.RLock()
	defer v.mu.RUnlock()
	if val := v.entitlements; val != nil {
		return val
	}
	return nil
}

func (v *User) ExternalID() string {
	v.mu.RLock()
	defer v.mu.RUnlock()
	if val := v.externalID; val != nil {
		return *val
	}
	return ""
}

func (v *User) Groups() []*AssociatedGroup {
	v.mu.RLock()
	defer v.mu.RUnlock()
	if val := v.groups; val != nil {
		return val
	}
	return nil
}

func (v *User) ID() string {
	v.mu.RLock()
	defer v.mu.RUnlock()
	if val := v.id; val != nil {
		return *val
	}
	return ""
}

func (v *User) IMS() []*IMS {
	v.mu.RLock()
	defer v.mu.RUnlock()
	if val := v.ims; val != nil {
		return val
	}
	return nil
}

func (v *User) Locale() string {
	v.mu.RLock()
	defer v.mu.RUnlock()
	if val := v.locale; val != nil {
		return *val
	}
	return ""
}

func (v *User) Meta() *Meta {
	v.mu.RLock()
	defer v.mu.RUnlock()
	if val := v.meta; val != nil {
		return val
	}
	return nil
}

func (v *User) Name() *Names {
	v.mu.RLock()
	defer v.mu.RUnlock()
	if val := v.name; val != nil {
		return val
	}
	return nil
}

func (v *User) NickName() string {
	v.mu.RLock()
	defer v.mu.RUnlock()
	if val := v.nickName; val != nil {
		return *val
	}
	return ""
}

func (v *User) Password() string {
	v.mu.RLock()
	defer v.mu.RUnlock()
	if val := v.password; val != nil {
		return *val
	}
	return ""
}

func (v *User) PhoneNumbers() []*PhoneNumber {
	v.mu.RLock()
	defer v.mu.RUnlock()
	if val := v.phoneNumbers; val != nil {
		return val
	}
	return nil
}

func (v *User) Photos() []*Photo {
	v.mu.RLock()
	defer v.mu.RUnlock()
	if val := v.photos; val != nil {
		return val
	}
	return nil
}

func (v *User) PreferredLanguage() string {
	v.mu.RLock()
	defer v.mu.RUnlock()
	if val := v.preferredLanguage; val != nil {
		return *val
	}
	return ""
}

func (v *User) ProfileURL() string {
	v.mu.RLock()
	defer v.mu.RUnlock()
	if val := v.profileURL; val != nil {
		return *val
	}
	return ""
}

func (v *User) Roles() []*Role {
	v.mu.RLock()
	defer v.mu.RUnlock()
	if val := v.roles; val != nil {
		return val
	}
	return nil
}

func (v *User) Schemas() []string {
	v.mu.RLock()
	defer v.mu.RUnlock()
	if val := v.schemas; val != nil {
		return val.GetValue()
	}
	return nil
}

func (v *User) Timezone() string {
	v.mu.RLock()
	defer v.mu.RUnlock()
	if val := v.timezone; val != nil {
		return *val
	}
	return ""
}

func (v *User) Title() string {
	v.mu.RLock()
	defer v.mu.RUnlock()
	if val := v.title; val != nil {
		return *val
	}
	return ""
}

func (v *User) UserName() string {
	v.mu.RLock()
	defer v.mu.RUnlock()
	if val := v.userName; val != nil {
		return *val
	}
	return ""
}

func (v *User) UserType() string {
	v.mu.RLock()
	defer v.mu.RUnlock()
	if val := v.userType; val != nil {
		return *val
	}
	return ""
}

func (v *User) X509Certificates() []*X509Certificate {
	v.mu.RLock()
	defer v.mu.RUnlock()
	if val := v.x509Certificates; val != nil {
		return val
	}
	return nil
}

// Remove removes the value associated with a key
func (v *User) Remove(key string) error {
	v.mu.Lock()
	defer v.mu.Unlock()

	switch key {
	case UserActiveKey:
		v.active = nil
	case UserAddressesKey:
		v.addresses = nil
	case UserDisplayNameKey:
		v.displayName = nil
	case UserEmailsKey:
		v.emails = nil
	case UserEntitlementsKey:
		v.entitlements = nil
	case UserExternalIDKey:
		v.externalID = nil
	case UserGroupsKey:
		v.groups = nil
	case UserIDKey:
		v.id = nil
	case UserIMSKey:
		v.ims = nil
	case UserLocaleKey:
		v.locale = nil
	case UserMetaKey:
		v.meta = nil
	case UserNameKey:
		v.name = nil
	case UserNickNameKey:
		v.nickName = nil
	case UserPasswordKey:
		v.password = nil
	case UserPhoneNumbersKey:
		v.phoneNumbers = nil
	case UserPhotosKey:
		v.photos = nil
	case UserPreferredLanguageKey:
		v.preferredLanguage = nil
	case UserProfileURLKey:
		v.profileURL = nil
	case UserRolesKey:
		v.roles = nil
	case UserSchemasKey:
		v.schemas = nil
	case UserTimezoneKey:
		v.timezone = nil
	case UserTitleKey:
		v.title = nil
	case UserUserNameKey:
		v.userName = nil
	case UserUserTypeKey:
		v.userType = nil
	case UserX509CertificatesKey:
		v.x509Certificates = nil
	default:
		delete(v.extra, key)
	}

	return nil
}

func (v *User) Clone(dst interface{}) error {
	v.mu.RLock()
	defer v.mu.RUnlock()

	extra := make(map[string]interface{})
	for key, val := range v.extra {
		extra[key] = val
	}
	return blackmagic.AssignIfCompatible(dst, &User{
		active:            v.active,
		addresses:         v.addresses,
		displayName:       v.displayName,
		emails:            v.emails,
		entitlements:      v.entitlements,
		externalID:        v.externalID,
		groups:            v.groups,
		id:                v.id,
		ims:               v.ims,
		locale:            v.locale,
		meta:              v.meta,
		name:              v.name,
		nickName:          v.nickName,
		password:          v.password,
		phoneNumbers:      v.phoneNumbers,
		photos:            v.photos,
		preferredLanguage: v.preferredLanguage,
		profileURL:        v.profileURL,
		roles:             v.roles,
		schemas:           v.schemas,
		timezone:          v.timezone,
		title:             v.title,
		userName:          v.userName,
		userType:          v.userType,
		x509Certificates:  v.x509Certificates,
		extra:             extra,
	})
}

// MarshalJSON serializes User into JSON.
// All pre-declared fields are included as long as a value is
// assigned to them, as well as all extra fields. All of these
// fields are sorted in alphabetical order.
func (v *User) MarshalJSON() ([]byte, error) {
	v.mu.RLock()
	defer v.mu.RUnlock()

	var buf bytes.Buffer
	enc := json.NewEncoder(&buf)
	buf.WriteByte('{')
	for i, k := range v.Keys() {
		var val interface{}
		if err := v.getNoLock(k, &val, true); err != nil {
			return nil, fmt.Errorf(`failed to retrieve value for field %q: %w`, k, err)
		}

		if i > 0 {
			buf.WriteByte(',')
		}
		if err := enc.Encode(k); err != nil {
			return nil, fmt.Errorf(`failed to encode map key name: %w`, err)
		}
		buf.WriteByte(':')
		if err := enc.Encode(val); err != nil {
			return nil, fmt.Errorf(`failed to encode map value for %q: %w`, k, err)
		}
	}
	buf.WriteByte('}')
	return buf.Bytes(), nil
}

// UnmarshalJSON deserializes a piece of JSON data into User.
//
// Pre-defined fields must be deserializable via "encoding/json" to their
// respective Go types, otherwise an error is returned.
//
// Extra fields are stored in a special "extra" storage, which can only
// be accessed via `Get()` and `Set()` methods.
func (v *User) UnmarshalJSON(data []byte) error {
	v.mu.Lock()
	defer v.mu.Unlock()
	v.active = nil
	v.addresses = nil
	v.displayName = nil
	v.emails = nil
	v.entitlements = nil
	v.externalID = nil
	v.groups = nil
	v.id = nil
	v.ims = nil
	v.locale = nil
	v.meta = nil
	v.name = nil
	v.nickName = nil
	v.password = nil
	v.phoneNumbers = nil
	v.photos = nil
	v.preferredLanguage = nil
	v.profileURL = nil
	v.roles = nil
	v.schemas = nil
	v.timezone = nil
	v.title = nil
	v.userName = nil
	v.userType = nil
	v.x509Certificates = nil

	dec := json.NewDecoder(bytes.NewReader(data))
	var extra map[string]interface{}

LOOP:
	for {
		tok, err := dec.Token()
		if err != nil {
			return fmt.Errorf(`error reading JSON token: %w`, err)
		}
		switch tok := tok.(type) {
		case json.Delim:
			if tok == '}' { // end of object
				break LOOP
			}
			// we should only get into this clause at the very beginning, and just once
			if tok != '{' {
				return fmt.Errorf(`expected '{', but got '%c'`, tok)
			}
		case string:
			switch tok {
			case UserActiveKey:
				var val bool
				if err := dec.Decode(&val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, UserActiveKey, err)
				}
				v.active = &val
			case UserAddressesKey:
				var val []*Address
				if err := dec.Decode(&val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, UserAddressesKey, err)
				}
				v.addresses = val
			case UserDisplayNameKey:
				var val string
				if err := dec.Decode(&val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, UserDisplayNameKey, err)
				}
				v.displayName = &val
			case UserEmailsKey:
				var val []*Email
				if err := dec.Decode(&val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, UserEmailsKey, err)
				}
				v.emails = val
			case UserEntitlementsKey:
				var val []*Entitlement
				if err := dec.Decode(&val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, UserEntitlementsKey, err)
				}
				v.entitlements = val
			case UserExternalIDKey:
				var val string
				if err := dec.Decode(&val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, UserExternalIDKey, err)
				}
				v.externalID = &val
			case UserGroupsKey:
				var val []*AssociatedGroup
				if err := dec.Decode(&val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, UserGroupsKey, err)
				}
				v.groups = val
			case UserIDKey:
				var val string
				if err := dec.Decode(&val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, UserIDKey, err)
				}
				v.id = &val
			case UserIMSKey:
				var val []*IMS
				if err := dec.Decode(&val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, UserIMSKey, err)
				}
				v.ims = val
			case UserLocaleKey:
				var val string
				if err := dec.Decode(&val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, UserLocaleKey, err)
				}
				v.locale = &val
			case UserMetaKey:
				var val Meta
				if err := dec.Decode(&val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, UserMetaKey, err)
				}
				v.meta = &val
			case UserNameKey:
				var val Names
				if err := dec.Decode(&val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, UserNameKey, err)
				}
				v.name = &val
			case UserNickNameKey:
				var val string
				if err := dec.Decode(&val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, UserNickNameKey, err)
				}
				v.nickName = &val
			case UserPasswordKey:
				var val string
				if err := dec.Decode(&val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, UserPasswordKey, err)
				}
				v.password = &val
			case UserPhoneNumbersKey:
				var val []*PhoneNumber
				if err := dec.Decode(&val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, UserPhoneNumbersKey, err)
				}
				v.phoneNumbers = val
			case UserPhotosKey:
				var val []*Photo
				if err := dec.Decode(&val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, UserPhotosKey, err)
				}
				v.photos = val
			case UserPreferredLanguageKey:
				var val string
				if err := dec.Decode(&val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, UserPreferredLanguageKey, err)
				}
				v.preferredLanguage = &val
			case UserProfileURLKey:
				var val string
				if err := dec.Decode(&val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, UserProfileURLKey, err)
				}
				v.profileURL = &val
			case UserRolesKey:
				var val []*Role
				if err := dec.Decode(&val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, UserRolesKey, err)
				}
				v.roles = val
			case UserSchemasKey:
				var val schemas
				if err := dec.Decode(&val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, UserSchemasKey, err)
				}
				v.schemas = &val
			case UserTimezoneKey:
				var val string
				if err := dec.Decode(&val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, UserTimezoneKey, err)
				}
				v.timezone = &val
			case UserTitleKey:
				var val string
				if err := dec.Decode(&val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, UserTitleKey, err)
				}
				v.title = &val
			case UserUserNameKey:
				var val string
				if err := dec.Decode(&val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, UserUserNameKey, err)
				}
				v.userName = &val
			case UserUserTypeKey:
				var val string
				if err := dec.Decode(&val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, UserUserTypeKey, err)
				}
				v.userType = &val
			case UserX509CertificatesKey:
				var val []*X509Certificate
				if err := dec.Decode(&val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, UserX509CertificatesKey, err)
				}
				v.x509Certificates = val
			default:
				var val interface{}
				if err := v.decodeExtraField(tok, dec, &val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, tok, err)
				}
				if extra == nil {
					extra = make(map[string]interface{})
				}
				extra[tok] = val
			}
		}
	}

	if extra != nil {
		v.extra = extra
	}
	return nil
}

type UserBuilder struct {
	mu     sync.Mutex
	err    error
	once   sync.Once
	object *User
}

// NewUserBuilder creates a new UserBuilder instance.
// UserBuilder is safe to be used uninitialized as well.
func NewUserBuilder() *UserBuilder {
	return &UserBuilder{}
}

func (b *UserBuilder) initialize() {
	b.err = nil
	b.object = &User{}
	b.object.schemas = &schemas{}
	b.object.schemas.Add(UserSchemaURI)
}
func (b *UserBuilder) Active(in bool) *UserBuilder {
	return b.SetField(UserActiveKey, in)
}
func (b *UserBuilder) Addresses(in ...*Address) *UserBuilder {
	return b.SetField(UserAddressesKey, in)
}
func (b *UserBuilder) DisplayName(in string) *UserBuilder {
	return b.SetField(UserDisplayNameKey, in)
}
func (b *UserBuilder) Emails(in ...*Email) *UserBuilder {
	return b.SetField(UserEmailsKey, in)
}
func (b *UserBuilder) Entitlements(in ...*Entitlement) *UserBuilder {
	return b.SetField(UserEntitlementsKey, in)
}
func (b *UserBuilder) ExternalID(in string) *UserBuilder {
	return b.SetField(UserExternalIDKey, in)
}
func (b *UserBuilder) Groups(in ...*AssociatedGroup) *UserBuilder {
	return b.SetField(UserGroupsKey, in)
}
func (b *UserBuilder) ID(in string) *UserBuilder {
	return b.SetField(UserIDKey, in)
}
func (b *UserBuilder) IMS(in ...*IMS) *UserBuilder {
	return b.SetField(UserIMSKey, in)
}
func (b *UserBuilder) Locale(in string) *UserBuilder {
	return b.SetField(UserLocaleKey, in)
}
func (b *UserBuilder) Meta(in *Meta) *UserBuilder {
	return b.SetField(UserMetaKey, in)
}
func (b *UserBuilder) Name(in *Names) *UserBuilder {
	return b.SetField(UserNameKey, in)
}
func (b *UserBuilder) NickName(in string) *UserBuilder {
	return b.SetField(UserNickNameKey, in)
}
func (b *UserBuilder) Password(in string) *UserBuilder {
	return b.SetField(UserPasswordKey, in)
}
func (b *UserBuilder) PhoneNumbers(in ...*PhoneNumber) *UserBuilder {
	return b.SetField(UserPhoneNumbersKey, in)
}
func (b *UserBuilder) Photos(in ...*Photo) *UserBuilder {
	return b.SetField(UserPhotosKey, in)
}
func (b *UserBuilder) PreferredLanguage(in string) *UserBuilder {
	return b.SetField(UserPreferredLanguageKey, in)
}
func (b *UserBuilder) ProfileURL(in string) *UserBuilder {
	return b.SetField(UserProfileURLKey, in)
}
func (b *UserBuilder) Roles(in ...*Role) *UserBuilder {
	return b.SetField(UserRolesKey, in)
}
func (b *UserBuilder) Schemas(in ...string) *UserBuilder {
	return b.SetField(UserSchemasKey, in)
}
func (b *UserBuilder) Timezone(in string) *UserBuilder {
	return b.SetField(UserTimezoneKey, in)
}
func (b *UserBuilder) Title(in string) *UserBuilder {
	return b.SetField(UserTitleKey, in)
}
func (b *UserBuilder) UserName(in string) *UserBuilder {
	return b.SetField(UserUserNameKey, in)
}
func (b *UserBuilder) UserType(in string) *UserBuilder {
	return b.SetField(UserUserTypeKey, in)
}
func (b *UserBuilder) X509Certificates(in ...*X509Certificate) *UserBuilder {
	return b.SetField(UserX509CertificatesKey, in)
}

// SetField sets the value of any field. The name should be the JSON field name.
// Type check will only be performed for pre-defined types
func (b *UserBuilder) SetField(name string, value interface{}) *UserBuilder {
	b.mu.Lock()
	defer b.mu.Unlock()

	b.once.Do(b.initialize)
	if b.err != nil {
		return b
	}

	if err := b.object.Set(name, value); err != nil {
		b.err = err
	}
	return b
}
func (b *UserBuilder) Build() (*User, error) {
	b.mu.Lock()
	defer b.mu.Unlock()

	b.once.Do(b.initialize)
	if b.err != nil {
		return nil, b.err
	}
	if b.object.userName == nil {
		return nil, fmt.Errorf("required field 'UserName' not initialized")
	}
	obj := b.object
	b.once = sync.Once{}
	b.once.Do(b.initialize)
	return obj, nil
}
func (b *UserBuilder) MustBuild() *User {
	object, err := b.Build()
	if err != nil {
		panic(err)
	}
	return object
}

func (b *UserBuilder) From(in *User) *UserBuilder {
	b.mu.Lock()
	defer b.mu.Unlock()
	b.once.Do(b.initialize)
	if b.err != nil {
		return b
	}

	var cloned User
	if err := in.Clone(&cloned); err != nil {
		b.err = err
		return b
	}

	b.object = &cloned
	return b
}

func (b *UserBuilder) Extension(uri string, value interface{}) *UserBuilder {
	b.mu.Lock()
	defer b.mu.Unlock()
	b.once.Do(b.initialize)
	if b.err != nil {
		return b
	}
	if b.object.schemas == nil {
		b.object.schemas = &schemas{}
		b.object.schemas.Add(UserSchemaURI)
	}
	b.object.schemas.Add(uri)
	if err := b.object.Set(uri, value); err != nil {
		b.err = err
	}
	return b
}

// AsMap returns the resource as a Go map
func (v *User) AsMap(m map[string]interface{}) error {
	v.mu.RLock()
	defer v.mu.RUnlock()

	for _, key := range v.Keys() {
		var val interface{}
		if err := v.getNoLock(key, &val, false); err != nil {
			m[key] = val
		}
	}
	return nil
}

// GetExtension takes into account extension uri, and fetches
// the specified attribute from the extension object
func (v *User) GetExtension(name, uri string, dst interface{}) error {
	if uri == "" {
		return v.Get(name, dst)
	}
	var ext interface{}
	if err := v.Get(uri, &ext); err != nil {
		return fmt.Errorf(`failed to fetch extension %q: %w`, uri, err)
	}

	getter, ok := ext.(interface {
		Get(string, interface{}) error
	})
	if !ok {
		return fmt.Errorf(`extension does not implement Get(string, interface{}) error`)
	}
	return getter.Get(name, dst)
}

func (*User) decodeExtraField(name string, dec *json.Decoder, dst interface{}) error {
	// we can get an instance of the resource object
	if rx, ok := registry.LookupByURI(name); ok {
		if err := dec.Decode(&rx); err != nil {
			return fmt.Errorf(`failed to decode value for key %q: %w`, name, err)
		}
		if err := blackmagic.AssignIfCompatible(dst, rx); err != nil {
			return err
		}
	} else {
		if err := dec.Decode(dst); err != nil {
			return fmt.Errorf(`failed to decode value for key %q: %w`, name, err)
		}
	}
	return nil
}

func (b *Builder) User() *UserBuilder {
	return &UserBuilder{}
}
