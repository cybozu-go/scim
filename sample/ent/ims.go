// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/cybozu-go/scim/sample/ent/ims"
	"github.com/cybozu-go/scim/sample/ent/user"
	"github.com/google/uuid"
)

// IMS is the model entity for the IMS schema.
type IMS struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Value holds the value of the "value" field.
	Value string `json:"value,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IMSQuery when eager-loading is set.
	Edges      IMSEdges `json:"edges"`
	ims_user   *uuid.UUID
	user_imses *uuid.UUID
}

// IMSEdges holds the relations/edges for other nodes in the graph.
type IMSEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IMSEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*IMS) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case ims.FieldID:
			values[i] = new(sql.NullInt64)
		case ims.FieldValue:
			values[i] = new(sql.NullString)
		case ims.ForeignKeys[0]: // ims_user
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case ims.ForeignKeys[1]: // user_imses
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type IMS", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the IMS fields.
func (i *IMS) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case ims.FieldID:
			value, ok := values[j].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			i.ID = int(value.Int64)
		case ims.FieldValue:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[j])
			} else if value.Valid {
				i.Value = value.String
			}
		case ims.ForeignKeys[0]:
			if value, ok := values[j].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field ims_user", values[j])
			} else if value.Valid {
				i.ims_user = new(uuid.UUID)
				*i.ims_user = *value.S.(*uuid.UUID)
			}
		case ims.ForeignKeys[1]:
			if value, ok := values[j].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_imses", values[j])
			} else if value.Valid {
				i.user_imses = new(uuid.UUID)
				*i.user_imses = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the IMS entity.
func (i *IMS) QueryUser() *UserQuery {
	return (&IMSClient{config: i.config}).QueryUser(i)
}

// Update returns a builder for updating this IMS.
// Note that you need to call IMS.Unwrap() before calling this method if this IMS
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *IMS) Update() *IMSUpdateOne {
	return (&IMSClient{config: i.config}).UpdateOne(i)
}

// Unwrap unwraps the IMS entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *IMS) Unwrap() *IMS {
	tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: IMS is not a transactional entity")
	}
	i.config.driver = tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *IMS) String() string {
	var builder strings.Builder
	builder.WriteString("IMS(")
	builder.WriteString(fmt.Sprintf("id=%v", i.ID))
	builder.WriteString(", value=")
	builder.WriteString(i.Value)
	builder.WriteByte(')')
	return builder.String()
}

// IMSs is a parsable slice of IMS.
type IMSs []*IMS

func (i IMSs) config(cfg config) {
	for _i := range i {
		i[_i].config = cfg
	}
}
