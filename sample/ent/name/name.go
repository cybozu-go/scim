// Code generated by entc, DO NOT EDIT.

package name

const (
	// Label holds the string label denoting the name type in the database.
	Label = "name"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFamilyName holds the string denoting the familyname field in the database.
	FieldFamilyName = "family_name"
	// FieldFormatted holds the string denoting the formatted field in the database.
	FieldFormatted = "formatted"
	// FieldGivenName holds the string denoting the givenname field in the database.
	FieldGivenName = "given_name"
	// FieldHonorificPrefix holds the string denoting the honorificprefix field in the database.
	FieldHonorificPrefix = "honorific_prefix"
	// FieldHonorificSuffix holds the string denoting the honorificsuffix field in the database.
	FieldHonorificSuffix = "honorific_suffix"
	// FieldMiddleName holds the string denoting the middlename field in the database.
	FieldMiddleName = "middle_name"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"
	// Table holds the table name of the name in the database.
	Table = "names"
	// UsersTable is the table that holds the users relation/edge.
	UsersTable = "names"
	// UsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsersInverseTable = "users"
	// UsersColumn is the table column denoting the users relation/edge.
	UsersColumn = "user_names"
)

// Columns holds all SQL columns for name fields.
var Columns = []string{
	FieldID,
	FieldFamilyName,
	FieldFormatted,
	FieldGivenName,
	FieldHonorificPrefix,
	FieldHonorificSuffix,
	FieldMiddleName,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "names"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_names",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
