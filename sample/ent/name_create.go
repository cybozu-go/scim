// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cybozu-go/scim/sample/ent/name"
	"github.com/cybozu-go/scim/sample/ent/user"
	"github.com/google/uuid"
)

// NameCreate is the builder for creating a Name entity.
type NameCreate struct {
	config
	mutation *NameMutation
	hooks    []Hook
}

// SetFamilyName sets the "familyName" field.
func (nc *NameCreate) SetFamilyName(s string) *NameCreate {
	nc.mutation.SetFamilyName(s)
	return nc
}

// SetNillableFamilyName sets the "familyName" field if the given value is not nil.
func (nc *NameCreate) SetNillableFamilyName(s *string) *NameCreate {
	if s != nil {
		nc.SetFamilyName(*s)
	}
	return nc
}

// SetFormatted sets the "formatted" field.
func (nc *NameCreate) SetFormatted(s string) *NameCreate {
	nc.mutation.SetFormatted(s)
	return nc
}

// SetNillableFormatted sets the "formatted" field if the given value is not nil.
func (nc *NameCreate) SetNillableFormatted(s *string) *NameCreate {
	if s != nil {
		nc.SetFormatted(*s)
	}
	return nc
}

// SetGivenName sets the "givenName" field.
func (nc *NameCreate) SetGivenName(s string) *NameCreate {
	nc.mutation.SetGivenName(s)
	return nc
}

// SetNillableGivenName sets the "givenName" field if the given value is not nil.
func (nc *NameCreate) SetNillableGivenName(s *string) *NameCreate {
	if s != nil {
		nc.SetGivenName(*s)
	}
	return nc
}

// SetHonorificPrefix sets the "honorificPrefix" field.
func (nc *NameCreate) SetHonorificPrefix(s string) *NameCreate {
	nc.mutation.SetHonorificPrefix(s)
	return nc
}

// SetNillableHonorificPrefix sets the "honorificPrefix" field if the given value is not nil.
func (nc *NameCreate) SetNillableHonorificPrefix(s *string) *NameCreate {
	if s != nil {
		nc.SetHonorificPrefix(*s)
	}
	return nc
}

// SetHonorificSuffix sets the "honorificSuffix" field.
func (nc *NameCreate) SetHonorificSuffix(s string) *NameCreate {
	nc.mutation.SetHonorificSuffix(s)
	return nc
}

// SetNillableHonorificSuffix sets the "honorificSuffix" field if the given value is not nil.
func (nc *NameCreate) SetNillableHonorificSuffix(s *string) *NameCreate {
	if s != nil {
		nc.SetHonorificSuffix(*s)
	}
	return nc
}

// SetMiddleName sets the "middleName" field.
func (nc *NameCreate) SetMiddleName(s string) *NameCreate {
	nc.mutation.SetMiddleName(s)
	return nc
}

// SetNillableMiddleName sets the "middleName" field if the given value is not nil.
func (nc *NameCreate) SetNillableMiddleName(s *string) *NameCreate {
	if s != nil {
		nc.SetMiddleName(*s)
	}
	return nc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (nc *NameCreate) SetUserID(id uuid.UUID) *NameCreate {
	nc.mutation.SetUserID(id)
	return nc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (nc *NameCreate) SetNillableUserID(id *uuid.UUID) *NameCreate {
	if id != nil {
		nc = nc.SetUserID(*id)
	}
	return nc
}

// SetUser sets the "user" edge to the User entity.
func (nc *NameCreate) SetUser(u *User) *NameCreate {
	return nc.SetUserID(u.ID)
}

// Mutation returns the NameMutation object of the builder.
func (nc *NameCreate) Mutation() *NameMutation {
	return nc.mutation
}

// Save creates the Name in the database.
func (nc *NameCreate) Save(ctx context.Context) (*Name, error) {
	var (
		err  error
		node *Name
	)
	if len(nc.hooks) == 0 {
		if err = nc.check(); err != nil {
			return nil, err
		}
		node, err = nc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NameMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = nc.check(); err != nil {
				return nil, err
			}
			nc.mutation = mutation
			if node, err = nc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(nc.hooks) - 1; i >= 0; i-- {
			if nc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = nc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (nc *NameCreate) SaveX(ctx context.Context) *Name {
	v, err := nc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nc *NameCreate) Exec(ctx context.Context) error {
	_, err := nc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nc *NameCreate) ExecX(ctx context.Context) {
	if err := nc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nc *NameCreate) check() error {
	return nil
}

func (nc *NameCreate) sqlSave(ctx context.Context) (*Name, error) {
	_node, _spec := nc.createSpec()
	if err := sqlgraph.CreateNode(ctx, nc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (nc *NameCreate) createSpec() (*Name, *sqlgraph.CreateSpec) {
	var (
		_node = &Name{config: nc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: name.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: name.FieldID,
			},
		}
	)
	if value, ok := nc.mutation.FamilyName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: name.FieldFamilyName,
		})
		_node.FamilyName = value
	}
	if value, ok := nc.mutation.Formatted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: name.FieldFormatted,
		})
		_node.Formatted = value
	}
	if value, ok := nc.mutation.GivenName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: name.FieldGivenName,
		})
		_node.GivenName = value
	}
	if value, ok := nc.mutation.HonorificPrefix(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: name.FieldHonorificPrefix,
		})
		_node.HonorificPrefix = value
	}
	if value, ok := nc.mutation.HonorificSuffix(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: name.FieldHonorificSuffix,
		})
		_node.HonorificSuffix = value
	}
	if value, ok := nc.mutation.MiddleName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: name.FieldMiddleName,
		})
		_node.MiddleName = value
	}
	if nodes := nc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   name.UserTable,
			Columns: []string{name.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_name = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// NameCreateBulk is the builder for creating many Name entities in bulk.
type NameCreateBulk struct {
	config
	builders []*NameCreate
}

// Save creates the Name entities in the database.
func (ncb *NameCreateBulk) Save(ctx context.Context) ([]*Name, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ncb.builders))
	nodes := make([]*Name, len(ncb.builders))
	mutators := make([]Mutator, len(ncb.builders))
	for i := range ncb.builders {
		func(i int, root context.Context) {
			builder := ncb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NameMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ncb *NameCreateBulk) SaveX(ctx context.Context) []*Name {
	v, err := ncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ncb *NameCreateBulk) Exec(ctx context.Context) error {
	_, err := ncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ncb *NameCreateBulk) ExecX(ctx context.Context) {
	if err := ncb.Exec(ctx); err != nil {
		panic(err)
	}
}
