// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/cybozu-go/scim/sample/ent/names"
	"github.com/cybozu-go/scim/sample/ent/user"
	"github.com/google/uuid"
)

// Names is the model entity for the Names schema.
type Names struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// FamilyName holds the value of the "familyName" field.
	FamilyName string `json:"familyName,omitempty"`
	// Formatted holds the value of the "formatted" field.
	Formatted string `json:"formatted,omitempty"`
	// GivenName holds the value of the "givenName" field.
	GivenName string `json:"givenName,omitempty"`
	// HonorificPrefix holds the value of the "honorificPrefix" field.
	HonorificPrefix string `json:"honorificPrefix,omitempty"`
	// HonorificSuffix holds the value of the "honorificSuffix" field.
	HonorificSuffix string `json:"honorificSuffix,omitempty"`
	// MiddleName holds the value of the "middleName" field.
	MiddleName string `json:"middleName,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NamesQuery when eager-loading is set.
	Edges     NamesEdges `json:"edges"`
	user_name *uuid.UUID
}

// NamesEdges holds the relations/edges for other nodes in the graph.
type NamesEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NamesEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Names) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case names.FieldID:
			values[i] = new(sql.NullInt64)
		case names.FieldFamilyName, names.FieldFormatted, names.FieldGivenName, names.FieldHonorificPrefix, names.FieldHonorificSuffix, names.FieldMiddleName:
			values[i] = new(sql.NullString)
		case names.ForeignKeys[0]: // user_name
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Names", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Names fields.
func (n *Names) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case names.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			n.ID = int(value.Int64)
		case names.FieldFamilyName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field familyName", values[i])
			} else if value.Valid {
				n.FamilyName = value.String
			}
		case names.FieldFormatted:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field formatted", values[i])
			} else if value.Valid {
				n.Formatted = value.String
			}
		case names.FieldGivenName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field givenName", values[i])
			} else if value.Valid {
				n.GivenName = value.String
			}
		case names.FieldHonorificPrefix:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field honorificPrefix", values[i])
			} else if value.Valid {
				n.HonorificPrefix = value.String
			}
		case names.FieldHonorificSuffix:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field honorificSuffix", values[i])
			} else if value.Valid {
				n.HonorificSuffix = value.String
			}
		case names.FieldMiddleName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field middleName", values[i])
			} else if value.Valid {
				n.MiddleName = value.String
			}
		case names.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_name", values[i])
			} else if value.Valid {
				n.user_name = new(uuid.UUID)
				*n.user_name = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the Names entity.
func (n *Names) QueryUser() *UserQuery {
	return (&NamesClient{config: n.config}).QueryUser(n)
}

// Update returns a builder for updating this Names.
// Note that you need to call Names.Unwrap() before calling this method if this Names
// was returned from a transaction, and the transaction was committed or rolled back.
func (n *Names) Update() *NamesUpdateOne {
	return (&NamesClient{config: n.config}).UpdateOne(n)
}

// Unwrap unwraps the Names entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (n *Names) Unwrap() *Names {
	tx, ok := n.config.driver.(*txDriver)
	if !ok {
		panic("ent: Names is not a transactional entity")
	}
	n.config.driver = tx.drv
	return n
}

// String implements the fmt.Stringer.
func (n *Names) String() string {
	var builder strings.Builder
	builder.WriteString("Names(")
	builder.WriteString(fmt.Sprintf("id=%v", n.ID))
	builder.WriteString(", familyName=")
	builder.WriteString(n.FamilyName)
	builder.WriteString(", formatted=")
	builder.WriteString(n.Formatted)
	builder.WriteString(", givenName=")
	builder.WriteString(n.GivenName)
	builder.WriteString(", honorificPrefix=")
	builder.WriteString(n.HonorificPrefix)
	builder.WriteString(", honorificSuffix=")
	builder.WriteString(n.HonorificSuffix)
	builder.WriteString(", middleName=")
	builder.WriteString(n.MiddleName)
	builder.WriteByte(')')
	return builder.String()
}

// NamesSlice is a parsable slice of Names.
type NamesSlice []*Names

func (n NamesSlice) config(cfg config) {
	for _i := range n {
		n[_i].config = cfg
	}
}
