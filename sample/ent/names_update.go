// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cybozu-go/scim/sample/ent/names"
	"github.com/cybozu-go/scim/sample/ent/predicate"
	"github.com/cybozu-go/scim/sample/ent/user"
	"github.com/google/uuid"
)

// NamesUpdate is the builder for updating Names entities.
type NamesUpdate struct {
	config
	hooks    []Hook
	mutation *NamesMutation
}

// Where appends a list predicates to the NamesUpdate builder.
func (nu *NamesUpdate) Where(ps ...predicate.Names) *NamesUpdate {
	nu.mutation.Where(ps...)
	return nu
}

// SetFamilyName sets the "familyName" field.
func (nu *NamesUpdate) SetFamilyName(s string) *NamesUpdate {
	nu.mutation.SetFamilyName(s)
	return nu
}

// SetNillableFamilyName sets the "familyName" field if the given value is not nil.
func (nu *NamesUpdate) SetNillableFamilyName(s *string) *NamesUpdate {
	if s != nil {
		nu.SetFamilyName(*s)
	}
	return nu
}

// ClearFamilyName clears the value of the "familyName" field.
func (nu *NamesUpdate) ClearFamilyName() *NamesUpdate {
	nu.mutation.ClearFamilyName()
	return nu
}

// SetFormatted sets the "formatted" field.
func (nu *NamesUpdate) SetFormatted(s string) *NamesUpdate {
	nu.mutation.SetFormatted(s)
	return nu
}

// SetNillableFormatted sets the "formatted" field if the given value is not nil.
func (nu *NamesUpdate) SetNillableFormatted(s *string) *NamesUpdate {
	if s != nil {
		nu.SetFormatted(*s)
	}
	return nu
}

// ClearFormatted clears the value of the "formatted" field.
func (nu *NamesUpdate) ClearFormatted() *NamesUpdate {
	nu.mutation.ClearFormatted()
	return nu
}

// SetGivenName sets the "givenName" field.
func (nu *NamesUpdate) SetGivenName(s string) *NamesUpdate {
	nu.mutation.SetGivenName(s)
	return nu
}

// SetNillableGivenName sets the "givenName" field if the given value is not nil.
func (nu *NamesUpdate) SetNillableGivenName(s *string) *NamesUpdate {
	if s != nil {
		nu.SetGivenName(*s)
	}
	return nu
}

// ClearGivenName clears the value of the "givenName" field.
func (nu *NamesUpdate) ClearGivenName() *NamesUpdate {
	nu.mutation.ClearGivenName()
	return nu
}

// SetHonorificPrefix sets the "honorificPrefix" field.
func (nu *NamesUpdate) SetHonorificPrefix(s string) *NamesUpdate {
	nu.mutation.SetHonorificPrefix(s)
	return nu
}

// SetNillableHonorificPrefix sets the "honorificPrefix" field if the given value is not nil.
func (nu *NamesUpdate) SetNillableHonorificPrefix(s *string) *NamesUpdate {
	if s != nil {
		nu.SetHonorificPrefix(*s)
	}
	return nu
}

// ClearHonorificPrefix clears the value of the "honorificPrefix" field.
func (nu *NamesUpdate) ClearHonorificPrefix() *NamesUpdate {
	nu.mutation.ClearHonorificPrefix()
	return nu
}

// SetHonorificSuffix sets the "honorificSuffix" field.
func (nu *NamesUpdate) SetHonorificSuffix(s string) *NamesUpdate {
	nu.mutation.SetHonorificSuffix(s)
	return nu
}

// SetNillableHonorificSuffix sets the "honorificSuffix" field if the given value is not nil.
func (nu *NamesUpdate) SetNillableHonorificSuffix(s *string) *NamesUpdate {
	if s != nil {
		nu.SetHonorificSuffix(*s)
	}
	return nu
}

// ClearHonorificSuffix clears the value of the "honorificSuffix" field.
func (nu *NamesUpdate) ClearHonorificSuffix() *NamesUpdate {
	nu.mutation.ClearHonorificSuffix()
	return nu
}

// SetMiddleName sets the "middleName" field.
func (nu *NamesUpdate) SetMiddleName(s string) *NamesUpdate {
	nu.mutation.SetMiddleName(s)
	return nu
}

// SetNillableMiddleName sets the "middleName" field if the given value is not nil.
func (nu *NamesUpdate) SetNillableMiddleName(s *string) *NamesUpdate {
	if s != nil {
		nu.SetMiddleName(*s)
	}
	return nu
}

// ClearMiddleName clears the value of the "middleName" field.
func (nu *NamesUpdate) ClearMiddleName() *NamesUpdate {
	nu.mutation.ClearMiddleName()
	return nu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (nu *NamesUpdate) SetUserID(id uuid.UUID) *NamesUpdate {
	nu.mutation.SetUserID(id)
	return nu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (nu *NamesUpdate) SetNillableUserID(id *uuid.UUID) *NamesUpdate {
	if id != nil {
		nu = nu.SetUserID(*id)
	}
	return nu
}

// SetUser sets the "user" edge to the User entity.
func (nu *NamesUpdate) SetUser(u *User) *NamesUpdate {
	return nu.SetUserID(u.ID)
}

// Mutation returns the NamesMutation object of the builder.
func (nu *NamesUpdate) Mutation() *NamesMutation {
	return nu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (nu *NamesUpdate) ClearUser() *NamesUpdate {
	nu.mutation.ClearUser()
	return nu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nu *NamesUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(nu.hooks) == 0 {
		affected, err = nu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NamesMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			nu.mutation = mutation
			affected, err = nu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(nu.hooks) - 1; i >= 0; i-- {
			if nu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = nu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (nu *NamesUpdate) SaveX(ctx context.Context) int {
	affected, err := nu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nu *NamesUpdate) Exec(ctx context.Context) error {
	_, err := nu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nu *NamesUpdate) ExecX(ctx context.Context) {
	if err := nu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (nu *NamesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   names.Table,
			Columns: names.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: names.FieldID,
			},
		},
	}
	if ps := nu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nu.mutation.FamilyName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: names.FieldFamilyName,
		})
	}
	if nu.mutation.FamilyNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: names.FieldFamilyName,
		})
	}
	if value, ok := nu.mutation.Formatted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: names.FieldFormatted,
		})
	}
	if nu.mutation.FormattedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: names.FieldFormatted,
		})
	}
	if value, ok := nu.mutation.GivenName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: names.FieldGivenName,
		})
	}
	if nu.mutation.GivenNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: names.FieldGivenName,
		})
	}
	if value, ok := nu.mutation.HonorificPrefix(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: names.FieldHonorificPrefix,
		})
	}
	if nu.mutation.HonorificPrefixCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: names.FieldHonorificPrefix,
		})
	}
	if value, ok := nu.mutation.HonorificSuffix(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: names.FieldHonorificSuffix,
		})
	}
	if nu.mutation.HonorificSuffixCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: names.FieldHonorificSuffix,
		})
	}
	if value, ok := nu.mutation.MiddleName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: names.FieldMiddleName,
		})
	}
	if nu.mutation.MiddleNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: names.FieldMiddleName,
		})
	}
	if nu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   names.UserTable,
			Columns: []string{names.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   names.UserTable,
			Columns: []string{names.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{names.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// NamesUpdateOne is the builder for updating a single Names entity.
type NamesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NamesMutation
}

// SetFamilyName sets the "familyName" field.
func (nuo *NamesUpdateOne) SetFamilyName(s string) *NamesUpdateOne {
	nuo.mutation.SetFamilyName(s)
	return nuo
}

// SetNillableFamilyName sets the "familyName" field if the given value is not nil.
func (nuo *NamesUpdateOne) SetNillableFamilyName(s *string) *NamesUpdateOne {
	if s != nil {
		nuo.SetFamilyName(*s)
	}
	return nuo
}

// ClearFamilyName clears the value of the "familyName" field.
func (nuo *NamesUpdateOne) ClearFamilyName() *NamesUpdateOne {
	nuo.mutation.ClearFamilyName()
	return nuo
}

// SetFormatted sets the "formatted" field.
func (nuo *NamesUpdateOne) SetFormatted(s string) *NamesUpdateOne {
	nuo.mutation.SetFormatted(s)
	return nuo
}

// SetNillableFormatted sets the "formatted" field if the given value is not nil.
func (nuo *NamesUpdateOne) SetNillableFormatted(s *string) *NamesUpdateOne {
	if s != nil {
		nuo.SetFormatted(*s)
	}
	return nuo
}

// ClearFormatted clears the value of the "formatted" field.
func (nuo *NamesUpdateOne) ClearFormatted() *NamesUpdateOne {
	nuo.mutation.ClearFormatted()
	return nuo
}

// SetGivenName sets the "givenName" field.
func (nuo *NamesUpdateOne) SetGivenName(s string) *NamesUpdateOne {
	nuo.mutation.SetGivenName(s)
	return nuo
}

// SetNillableGivenName sets the "givenName" field if the given value is not nil.
func (nuo *NamesUpdateOne) SetNillableGivenName(s *string) *NamesUpdateOne {
	if s != nil {
		nuo.SetGivenName(*s)
	}
	return nuo
}

// ClearGivenName clears the value of the "givenName" field.
func (nuo *NamesUpdateOne) ClearGivenName() *NamesUpdateOne {
	nuo.mutation.ClearGivenName()
	return nuo
}

// SetHonorificPrefix sets the "honorificPrefix" field.
func (nuo *NamesUpdateOne) SetHonorificPrefix(s string) *NamesUpdateOne {
	nuo.mutation.SetHonorificPrefix(s)
	return nuo
}

// SetNillableHonorificPrefix sets the "honorificPrefix" field if the given value is not nil.
func (nuo *NamesUpdateOne) SetNillableHonorificPrefix(s *string) *NamesUpdateOne {
	if s != nil {
		nuo.SetHonorificPrefix(*s)
	}
	return nuo
}

// ClearHonorificPrefix clears the value of the "honorificPrefix" field.
func (nuo *NamesUpdateOne) ClearHonorificPrefix() *NamesUpdateOne {
	nuo.mutation.ClearHonorificPrefix()
	return nuo
}

// SetHonorificSuffix sets the "honorificSuffix" field.
func (nuo *NamesUpdateOne) SetHonorificSuffix(s string) *NamesUpdateOne {
	nuo.mutation.SetHonorificSuffix(s)
	return nuo
}

// SetNillableHonorificSuffix sets the "honorificSuffix" field if the given value is not nil.
func (nuo *NamesUpdateOne) SetNillableHonorificSuffix(s *string) *NamesUpdateOne {
	if s != nil {
		nuo.SetHonorificSuffix(*s)
	}
	return nuo
}

// ClearHonorificSuffix clears the value of the "honorificSuffix" field.
func (nuo *NamesUpdateOne) ClearHonorificSuffix() *NamesUpdateOne {
	nuo.mutation.ClearHonorificSuffix()
	return nuo
}

// SetMiddleName sets the "middleName" field.
func (nuo *NamesUpdateOne) SetMiddleName(s string) *NamesUpdateOne {
	nuo.mutation.SetMiddleName(s)
	return nuo
}

// SetNillableMiddleName sets the "middleName" field if the given value is not nil.
func (nuo *NamesUpdateOne) SetNillableMiddleName(s *string) *NamesUpdateOne {
	if s != nil {
		nuo.SetMiddleName(*s)
	}
	return nuo
}

// ClearMiddleName clears the value of the "middleName" field.
func (nuo *NamesUpdateOne) ClearMiddleName() *NamesUpdateOne {
	nuo.mutation.ClearMiddleName()
	return nuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (nuo *NamesUpdateOne) SetUserID(id uuid.UUID) *NamesUpdateOne {
	nuo.mutation.SetUserID(id)
	return nuo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (nuo *NamesUpdateOne) SetNillableUserID(id *uuid.UUID) *NamesUpdateOne {
	if id != nil {
		nuo = nuo.SetUserID(*id)
	}
	return nuo
}

// SetUser sets the "user" edge to the User entity.
func (nuo *NamesUpdateOne) SetUser(u *User) *NamesUpdateOne {
	return nuo.SetUserID(u.ID)
}

// Mutation returns the NamesMutation object of the builder.
func (nuo *NamesUpdateOne) Mutation() *NamesMutation {
	return nuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (nuo *NamesUpdateOne) ClearUser() *NamesUpdateOne {
	nuo.mutation.ClearUser()
	return nuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nuo *NamesUpdateOne) Select(field string, fields ...string) *NamesUpdateOne {
	nuo.fields = append([]string{field}, fields...)
	return nuo
}

// Save executes the query and returns the updated Names entity.
func (nuo *NamesUpdateOne) Save(ctx context.Context) (*Names, error) {
	var (
		err  error
		node *Names
	)
	if len(nuo.hooks) == 0 {
		node, err = nuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NamesMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			nuo.mutation = mutation
			node, err = nuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(nuo.hooks) - 1; i >= 0; i-- {
			if nuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = nuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (nuo *NamesUpdateOne) SaveX(ctx context.Context) *Names {
	node, err := nuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nuo *NamesUpdateOne) Exec(ctx context.Context) error {
	_, err := nuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuo *NamesUpdateOne) ExecX(ctx context.Context) {
	if err := nuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (nuo *NamesUpdateOne) sqlSave(ctx context.Context) (_node *Names, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   names.Table,
			Columns: names.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: names.FieldID,
			},
		},
	}
	id, ok := nuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Names.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, names.FieldID)
		for _, f := range fields {
			if !names.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != names.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nuo.mutation.FamilyName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: names.FieldFamilyName,
		})
	}
	if nuo.mutation.FamilyNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: names.FieldFamilyName,
		})
	}
	if value, ok := nuo.mutation.Formatted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: names.FieldFormatted,
		})
	}
	if nuo.mutation.FormattedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: names.FieldFormatted,
		})
	}
	if value, ok := nuo.mutation.GivenName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: names.FieldGivenName,
		})
	}
	if nuo.mutation.GivenNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: names.FieldGivenName,
		})
	}
	if value, ok := nuo.mutation.HonorificPrefix(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: names.FieldHonorificPrefix,
		})
	}
	if nuo.mutation.HonorificPrefixCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: names.FieldHonorificPrefix,
		})
	}
	if value, ok := nuo.mutation.HonorificSuffix(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: names.FieldHonorificSuffix,
		})
	}
	if nuo.mutation.HonorificSuffixCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: names.FieldHonorificSuffix,
		})
	}
	if value, ok := nuo.mutation.MiddleName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: names.FieldMiddleName,
		})
	}
	if nuo.mutation.MiddleNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: names.FieldMiddleName,
		})
	}
	if nuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   names.UserTable,
			Columns: []string{names.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   names.UserTable,
			Columns: []string{names.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Names{config: nuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{names.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
