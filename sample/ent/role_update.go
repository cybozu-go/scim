// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cybozu-go/scim/sample/ent/predicate"
	"github.com/cybozu-go/scim/sample/ent/role"
	"github.com/cybozu-go/scim/sample/ent/user"
	"github.com/google/uuid"
)

// RoleUpdate is the builder for updating Role entities.
type RoleUpdate struct {
	config
	hooks    []Hook
	mutation *RoleMutation
}

// Where appends a list predicates to the RoleUpdate builder.
func (ru *RoleUpdate) Where(ps ...predicate.Role) *RoleUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetDisplay sets the "display" field.
func (ru *RoleUpdate) SetDisplay(s string) *RoleUpdate {
	ru.mutation.SetDisplay(s)
	return ru
}

// SetNillableDisplay sets the "display" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableDisplay(s *string) *RoleUpdate {
	if s != nil {
		ru.SetDisplay(*s)
	}
	return ru
}

// ClearDisplay clears the value of the "display" field.
func (ru *RoleUpdate) ClearDisplay() *RoleUpdate {
	ru.mutation.ClearDisplay()
	return ru
}

// SetPrimary sets the "primary" field.
func (ru *RoleUpdate) SetPrimary(b bool) *RoleUpdate {
	ru.mutation.SetPrimary(b)
	return ru
}

// SetNillablePrimary sets the "primary" field if the given value is not nil.
func (ru *RoleUpdate) SetNillablePrimary(b *bool) *RoleUpdate {
	if b != nil {
		ru.SetPrimary(*b)
	}
	return ru
}

// ClearPrimary clears the value of the "primary" field.
func (ru *RoleUpdate) ClearPrimary() *RoleUpdate {
	ru.mutation.ClearPrimary()
	return ru
}

// SetType sets the "type" field.
func (ru *RoleUpdate) SetType(s string) *RoleUpdate {
	ru.mutation.SetType(s)
	return ru
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableType(s *string) *RoleUpdate {
	if s != nil {
		ru.SetType(*s)
	}
	return ru
}

// ClearType clears the value of the "type" field.
func (ru *RoleUpdate) ClearType() *RoleUpdate {
	ru.mutation.ClearType()
	return ru
}

// SetValue sets the "value" field.
func (ru *RoleUpdate) SetValue(s string) *RoleUpdate {
	ru.mutation.SetValue(s)
	return ru
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ru *RoleUpdate) SetUserID(id uuid.UUID) *RoleUpdate {
	ru.mutation.SetUserID(id)
	return ru
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (ru *RoleUpdate) SetNillableUserID(id *uuid.UUID) *RoleUpdate {
	if id != nil {
		ru = ru.SetUserID(*id)
	}
	return ru
}

// SetUser sets the "user" edge to the User entity.
func (ru *RoleUpdate) SetUser(u *User) *RoleUpdate {
	return ru.SetUserID(u.ID)
}

// Mutation returns the RoleMutation object of the builder.
func (ru *RoleUpdate) Mutation() *RoleMutation {
	return ru.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ru *RoleUpdate) ClearUser() *RoleUpdate {
	ru.mutation.ClearUser()
	return ru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RoleUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ru.hooks) == 0 {
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RoleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			if ru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RoleUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RoleUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RoleUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *RoleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   role.Table,
			Columns: role.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: role.FieldID,
			},
		},
	}
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Display(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: role.FieldDisplay,
		})
	}
	if ru.mutation.DisplayCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: role.FieldDisplay,
		})
	}
	if value, ok := ru.mutation.Primary(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: role.FieldPrimary,
		})
	}
	if ru.mutation.PrimaryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: role.FieldPrimary,
		})
	}
	if value, ok := ru.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: role.FieldType,
		})
	}
	if ru.mutation.TypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: role.FieldType,
		})
	}
	if value, ok := ru.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: role.FieldValue,
		})
	}
	if ru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   role.UserTable,
			Columns: []string{role.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   role.UserTable,
			Columns: []string{role.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{role.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// RoleUpdateOne is the builder for updating a single Role entity.
type RoleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RoleMutation
}

// SetDisplay sets the "display" field.
func (ruo *RoleUpdateOne) SetDisplay(s string) *RoleUpdateOne {
	ruo.mutation.SetDisplay(s)
	return ruo
}

// SetNillableDisplay sets the "display" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableDisplay(s *string) *RoleUpdateOne {
	if s != nil {
		ruo.SetDisplay(*s)
	}
	return ruo
}

// ClearDisplay clears the value of the "display" field.
func (ruo *RoleUpdateOne) ClearDisplay() *RoleUpdateOne {
	ruo.mutation.ClearDisplay()
	return ruo
}

// SetPrimary sets the "primary" field.
func (ruo *RoleUpdateOne) SetPrimary(b bool) *RoleUpdateOne {
	ruo.mutation.SetPrimary(b)
	return ruo
}

// SetNillablePrimary sets the "primary" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillablePrimary(b *bool) *RoleUpdateOne {
	if b != nil {
		ruo.SetPrimary(*b)
	}
	return ruo
}

// ClearPrimary clears the value of the "primary" field.
func (ruo *RoleUpdateOne) ClearPrimary() *RoleUpdateOne {
	ruo.mutation.ClearPrimary()
	return ruo
}

// SetType sets the "type" field.
func (ruo *RoleUpdateOne) SetType(s string) *RoleUpdateOne {
	ruo.mutation.SetType(s)
	return ruo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableType(s *string) *RoleUpdateOne {
	if s != nil {
		ruo.SetType(*s)
	}
	return ruo
}

// ClearType clears the value of the "type" field.
func (ruo *RoleUpdateOne) ClearType() *RoleUpdateOne {
	ruo.mutation.ClearType()
	return ruo
}

// SetValue sets the "value" field.
func (ruo *RoleUpdateOne) SetValue(s string) *RoleUpdateOne {
	ruo.mutation.SetValue(s)
	return ruo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ruo *RoleUpdateOne) SetUserID(id uuid.UUID) *RoleUpdateOne {
	ruo.mutation.SetUserID(id)
	return ruo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableUserID(id *uuid.UUID) *RoleUpdateOne {
	if id != nil {
		ruo = ruo.SetUserID(*id)
	}
	return ruo
}

// SetUser sets the "user" edge to the User entity.
func (ruo *RoleUpdateOne) SetUser(u *User) *RoleUpdateOne {
	return ruo.SetUserID(u.ID)
}

// Mutation returns the RoleMutation object of the builder.
func (ruo *RoleUpdateOne) Mutation() *RoleMutation {
	return ruo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ruo *RoleUpdateOne) ClearUser() *RoleUpdateOne {
	ruo.mutation.ClearUser()
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RoleUpdateOne) Select(field string, fields ...string) *RoleUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Role entity.
func (ruo *RoleUpdateOne) Save(ctx context.Context) (*Role, error) {
	var (
		err  error
		node *Role
	)
	if len(ruo.hooks) == 0 {
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RoleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			if ruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RoleUpdateOne) SaveX(ctx context.Context) *Role {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RoleUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RoleUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *RoleUpdateOne) sqlSave(ctx context.Context) (_node *Role, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   role.Table,
			Columns: role.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: role.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Role.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, role.FieldID)
		for _, f := range fields {
			if !role.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != role.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Display(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: role.FieldDisplay,
		})
	}
	if ruo.mutation.DisplayCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: role.FieldDisplay,
		})
	}
	if value, ok := ruo.mutation.Primary(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: role.FieldPrimary,
		})
	}
	if ruo.mutation.PrimaryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: role.FieldPrimary,
		})
	}
	if value, ok := ruo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: role.FieldType,
		})
	}
	if ruo.mutation.TypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: role.FieldType,
		})
	}
	if value, ok := ruo.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: role.FieldValue,
		})
	}
	if ruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   role.UserTable,
			Columns: []string{role.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   role.UserTable,
			Columns: []string{role.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Role{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{role.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
