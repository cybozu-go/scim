// Code generated by entc, DO NOT EDIT.

package user

import (
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldActive holds the string denoting the active field in the database.
	FieldActive = "active"
	// FieldDisplayName holds the string denoting the displayname field in the database.
	FieldDisplayName = "display_name"
	// FieldExternalID holds the string denoting the externalid field in the database.
	FieldExternalID = "external_id"
	// FieldLocale holds the string denoting the locale field in the database.
	FieldLocale = "locale"
	// FieldNickName holds the string denoting the nickname field in the database.
	FieldNickName = "nick_name"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldPreferredLanguage holds the string denoting the preferredlanguage field in the database.
	FieldPreferredLanguage = "preferred_language"
	// FieldProfileURL holds the string denoting the profileurl field in the database.
	FieldProfileURL = "profile_url"
	// FieldTimezone holds the string denoting the timezone field in the database.
	FieldTimezone = "timezone"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldUserName holds the string denoting the username field in the database.
	FieldUserName = "user_name"
	// FieldUserType holds the string denoting the usertype field in the database.
	FieldUserType = "user_type"
	// EdgeGroups holds the string denoting the groups edge name in mutations.
	EdgeGroups = "groups"
	// EdgeEmails holds the string denoting the emails edge name in mutations.
	EdgeEmails = "emails"
	// EdgeName holds the string denoting the name edge name in mutations.
	EdgeName = "name"
	// Table holds the table name of the user in the database.
	Table = "users"
	// GroupsTable is the table that holds the groups relation/edge.
	GroupsTable = "groups"
	// GroupsInverseTable is the table name for the Group entity.
	// It exists in this package in order to avoid circular dependency with the "group" package.
	GroupsInverseTable = "groups"
	// GroupsColumn is the table column denoting the groups relation/edge.
	GroupsColumn = "user_groups"
	// EmailsTable is the table that holds the emails relation/edge.
	EmailsTable = "emails"
	// EmailsInverseTable is the table name for the Email entity.
	// It exists in this package in order to avoid circular dependency with the "email" package.
	EmailsInverseTable = "emails"
	// EmailsColumn is the table column denoting the emails relation/edge.
	EmailsColumn = "user_emails"
	// NameTable is the table that holds the name relation/edge.
	NameTable = "names"
	// NameInverseTable is the table name for the Name entity.
	// It exists in this package in order to avoid circular dependency with the "name" package.
	NameInverseTable = "names"
	// NameColumn is the table column denoting the name relation/edge.
	NameColumn = "user_name"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldActive,
	FieldDisplayName,
	FieldExternalID,
	FieldLocale,
	FieldNickName,
	FieldPassword,
	FieldPreferredLanguage,
	FieldProfileURL,
	FieldTimezone,
	FieldTitle,
	FieldUserName,
	FieldUserType,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "users"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"group_users",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	PasswordValidator func(string) error
	// UserNameValidator is a validator for the "userName" field. It is called by the builders before save.
	UserNameValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
