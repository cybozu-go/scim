// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/cybozu-go/scim/sample/ent/user"
	"github.com/cybozu-go/scim/sample/ent/x509certificate"
	"github.com/google/uuid"
)

// X509Certificate is the model entity for the X509Certificate schema.
type X509Certificate struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Value holds the value of the "value" field.
	Value string `json:"value,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the X509CertificateQuery when eager-loading is set.
	Edges                X509CertificateEdges `json:"edges"`
	x509certificate_user *uuid.UUID
}

// X509CertificateEdges holds the relations/edges for other nodes in the graph.
type X509CertificateEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e X509CertificateEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*X509Certificate) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case x509certificate.FieldID:
			values[i] = new(sql.NullInt64)
		case x509certificate.FieldValue:
			values[i] = new(sql.NullString)
		case x509certificate.ForeignKeys[0]: // x509certificate_user
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type X509Certificate", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the X509Certificate fields.
func (x *X509Certificate) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case x509certificate.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			x.ID = int(value.Int64)
		case x509certificate.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				x.Value = value.String
			}
		case x509certificate.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field x509certificate_user", values[i])
			} else if value.Valid {
				x.x509certificate_user = new(uuid.UUID)
				*x.x509certificate_user = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the X509Certificate entity.
func (x *X509Certificate) QueryUser() *UserQuery {
	return (&X509CertificateClient{config: x.config}).QueryUser(x)
}

// Update returns a builder for updating this X509Certificate.
// Note that you need to call X509Certificate.Unwrap() before calling this method if this X509Certificate
// was returned from a transaction, and the transaction was committed or rolled back.
func (x *X509Certificate) Update() *X509CertificateUpdateOne {
	return (&X509CertificateClient{config: x.config}).UpdateOne(x)
}

// Unwrap unwraps the X509Certificate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (x *X509Certificate) Unwrap() *X509Certificate {
	tx, ok := x.config.driver.(*txDriver)
	if !ok {
		panic("ent: X509Certificate is not a transactional entity")
	}
	x.config.driver = tx.drv
	return x
}

// String implements the fmt.Stringer.
func (x *X509Certificate) String() string {
	var builder strings.Builder
	builder.WriteString("X509Certificate(")
	builder.WriteString(fmt.Sprintf("id=%v", x.ID))
	builder.WriteString(", value=")
	builder.WriteString(x.Value)
	builder.WriteByte(')')
	return builder.String()
}

// X509Certificates is a parsable slice of X509Certificate.
type X509Certificates []*X509Certificate

func (x X509Certificates) config(cfg config) {
	for _i := range x {
		x[_i].config = cfg
	}
}
