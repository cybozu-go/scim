// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cybozu-go/scim/sample/ent/predicate"
	"github.com/cybozu-go/scim/sample/ent/user"
	"github.com/cybozu-go/scim/sample/ent/x509certificate"
	"github.com/google/uuid"
)

// X509CertificateUpdate is the builder for updating X509Certificate entities.
type X509CertificateUpdate struct {
	config
	hooks    []Hook
	mutation *X509CertificateMutation
}

// Where appends a list predicates to the X509CertificateUpdate builder.
func (xu *X509CertificateUpdate) Where(ps ...predicate.X509Certificate) *X509CertificateUpdate {
	xu.mutation.Where(ps...)
	return xu
}

// SetValue sets the "value" field.
func (xu *X509CertificateUpdate) SetValue(s string) *X509CertificateUpdate {
	xu.mutation.SetValue(s)
	return xu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (xu *X509CertificateUpdate) SetUserID(id uuid.UUID) *X509CertificateUpdate {
	xu.mutation.SetUserID(id)
	return xu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (xu *X509CertificateUpdate) SetNillableUserID(id *uuid.UUID) *X509CertificateUpdate {
	if id != nil {
		xu = xu.SetUserID(*id)
	}
	return xu
}

// SetUser sets the "user" edge to the User entity.
func (xu *X509CertificateUpdate) SetUser(u *User) *X509CertificateUpdate {
	return xu.SetUserID(u.ID)
}

// Mutation returns the X509CertificateMutation object of the builder.
func (xu *X509CertificateUpdate) Mutation() *X509CertificateMutation {
	return xu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (xu *X509CertificateUpdate) ClearUser() *X509CertificateUpdate {
	xu.mutation.ClearUser()
	return xu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (xu *X509CertificateUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(xu.hooks) == 0 {
		affected, err = xu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*X509CertificateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			xu.mutation = mutation
			affected, err = xu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(xu.hooks) - 1; i >= 0; i-- {
			if xu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = xu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, xu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (xu *X509CertificateUpdate) SaveX(ctx context.Context) int {
	affected, err := xu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (xu *X509CertificateUpdate) Exec(ctx context.Context) error {
	_, err := xu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (xu *X509CertificateUpdate) ExecX(ctx context.Context) {
	if err := xu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (xu *X509CertificateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   x509certificate.Table,
			Columns: x509certificate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: x509certificate.FieldID,
			},
		},
	}
	if ps := xu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := xu.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: x509certificate.FieldValue,
		})
	}
	if xu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   x509certificate.UserTable,
			Columns: []string{x509certificate.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := xu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   x509certificate.UserTable,
			Columns: []string{x509certificate.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, xu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{x509certificate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// X509CertificateUpdateOne is the builder for updating a single X509Certificate entity.
type X509CertificateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *X509CertificateMutation
}

// SetValue sets the "value" field.
func (xuo *X509CertificateUpdateOne) SetValue(s string) *X509CertificateUpdateOne {
	xuo.mutation.SetValue(s)
	return xuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (xuo *X509CertificateUpdateOne) SetUserID(id uuid.UUID) *X509CertificateUpdateOne {
	xuo.mutation.SetUserID(id)
	return xuo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (xuo *X509CertificateUpdateOne) SetNillableUserID(id *uuid.UUID) *X509CertificateUpdateOne {
	if id != nil {
		xuo = xuo.SetUserID(*id)
	}
	return xuo
}

// SetUser sets the "user" edge to the User entity.
func (xuo *X509CertificateUpdateOne) SetUser(u *User) *X509CertificateUpdateOne {
	return xuo.SetUserID(u.ID)
}

// Mutation returns the X509CertificateMutation object of the builder.
func (xuo *X509CertificateUpdateOne) Mutation() *X509CertificateMutation {
	return xuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (xuo *X509CertificateUpdateOne) ClearUser() *X509CertificateUpdateOne {
	xuo.mutation.ClearUser()
	return xuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (xuo *X509CertificateUpdateOne) Select(field string, fields ...string) *X509CertificateUpdateOne {
	xuo.fields = append([]string{field}, fields...)
	return xuo
}

// Save executes the query and returns the updated X509Certificate entity.
func (xuo *X509CertificateUpdateOne) Save(ctx context.Context) (*X509Certificate, error) {
	var (
		err  error
		node *X509Certificate
	)
	if len(xuo.hooks) == 0 {
		node, err = xuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*X509CertificateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			xuo.mutation = mutation
			node, err = xuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(xuo.hooks) - 1; i >= 0; i-- {
			if xuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = xuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, xuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (xuo *X509CertificateUpdateOne) SaveX(ctx context.Context) *X509Certificate {
	node, err := xuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (xuo *X509CertificateUpdateOne) Exec(ctx context.Context) error {
	_, err := xuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (xuo *X509CertificateUpdateOne) ExecX(ctx context.Context) {
	if err := xuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (xuo *X509CertificateUpdateOne) sqlSave(ctx context.Context) (_node *X509Certificate, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   x509certificate.Table,
			Columns: x509certificate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: x509certificate.FieldID,
			},
		},
	}
	id, ok := xuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "X509Certificate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := xuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, x509certificate.FieldID)
		for _, f := range fields {
			if !x509certificate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != x509certificate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := xuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := xuo.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: x509certificate.FieldValue,
		})
	}
	if xuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   x509certificate.UserTable,
			Columns: []string{x509certificate.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := xuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   x509certificate.UserTable,
			Columns: []string{x509certificate.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &X509Certificate{config: xuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, xuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{x509certificate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
