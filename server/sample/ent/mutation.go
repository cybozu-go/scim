// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"github.com/cybozu-go/scim/server/sample/ent/email"
	"github.com/cybozu-go/scim/server/sample/ent/group"
	entname "github.com/cybozu-go/scim/server/sample/ent/name"
	"github.com/cybozu-go/scim/server/sample/ent/predicate"
	"github.com/cybozu-go/scim/server/sample/ent/user"
	"github.com/google/uuid"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeEmail = "Email"
	TypeGroup = "Group"
	TypeName  = "Name"
	TypeUser  = "User"
)

// EmailMutation represents an operation that mutates the Email nodes in the graph.
type EmailMutation struct {
	config
	op            Op
	typ           string
	id            *int
	display       *string
	primary       *bool
	_type         *string
	value         *string
	clearedFields map[string]struct{}
	users         *uuid.UUID
	clearedusers  bool
	done          bool
	oldValue      func(context.Context) (*Email, error)
	predicates    []predicate.Email
}

var _ ent.Mutation = (*EmailMutation)(nil)

// emailOption allows management of the mutation configuration using functional options.
type emailOption func(*EmailMutation)

// newEmailMutation creates new mutation for the Email entity.
func newEmailMutation(c config, op Op, opts ...emailOption) *EmailMutation {
	m := &EmailMutation{
		config:        c,
		op:            op,
		typ:           TypeEmail,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEmailID sets the ID field of the mutation.
func withEmailID(id int) emailOption {
	return func(m *EmailMutation) {
		var (
			err   error
			once  sync.Once
			value *Email
		)
		m.oldValue = func(ctx context.Context) (*Email, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Email.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEmail sets the old Email of the mutation.
func withEmail(node *Email) emailOption {
	return func(m *EmailMutation) {
		m.oldValue = func(context.Context) (*Email, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EmailMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EmailMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EmailMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EmailMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Email.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDisplay sets the "display" field.
func (m *EmailMutation) SetDisplay(s string) {
	m.display = &s
}

// Display returns the value of the "display" field in the mutation.
func (m *EmailMutation) Display() (r string, exists bool) {
	v := m.display
	if v == nil {
		return
	}
	return *v, true
}

// OldDisplay returns the old "display" field's value of the Email entity.
// If the Email object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmailMutation) OldDisplay(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisplay is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisplay requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisplay: %w", err)
	}
	return oldValue.Display, nil
}

// ClearDisplay clears the value of the "display" field.
func (m *EmailMutation) ClearDisplay() {
	m.display = nil
	m.clearedFields[email.FieldDisplay] = struct{}{}
}

// DisplayCleared returns if the "display" field was cleared in this mutation.
func (m *EmailMutation) DisplayCleared() bool {
	_, ok := m.clearedFields[email.FieldDisplay]
	return ok
}

// ResetDisplay resets all changes to the "display" field.
func (m *EmailMutation) ResetDisplay() {
	m.display = nil
	delete(m.clearedFields, email.FieldDisplay)
}

// SetPrimary sets the "primary" field.
func (m *EmailMutation) SetPrimary(b bool) {
	m.primary = &b
}

// Primary returns the value of the "primary" field in the mutation.
func (m *EmailMutation) Primary() (r bool, exists bool) {
	v := m.primary
	if v == nil {
		return
	}
	return *v, true
}

// OldPrimary returns the old "primary" field's value of the Email entity.
// If the Email object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmailMutation) OldPrimary(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrimary is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrimary requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrimary: %w", err)
	}
	return oldValue.Primary, nil
}

// ResetPrimary resets all changes to the "primary" field.
func (m *EmailMutation) ResetPrimary() {
	m.primary = nil
}

// SetType sets the "type" field.
func (m *EmailMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *EmailMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Email entity.
// If the Email object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmailMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ClearType clears the value of the "type" field.
func (m *EmailMutation) ClearType() {
	m._type = nil
	m.clearedFields[email.FieldType] = struct{}{}
}

// TypeCleared returns if the "type" field was cleared in this mutation.
func (m *EmailMutation) TypeCleared() bool {
	_, ok := m.clearedFields[email.FieldType]
	return ok
}

// ResetType resets all changes to the "type" field.
func (m *EmailMutation) ResetType() {
	m._type = nil
	delete(m.clearedFields, email.FieldType)
}

// SetValue sets the "value" field.
func (m *EmailMutation) SetValue(s string) {
	m.value = &s
}

// Value returns the value of the "value" field in the mutation.
func (m *EmailMutation) Value() (r string, exists bool) {
	v := m.value
	if v == nil {
		return
	}
	return *v, true
}

// OldValue returns the old "value" field's value of the Email entity.
// If the Email object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmailMutation) OldValue(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValue: %w", err)
	}
	return oldValue.Value, nil
}

// ResetValue resets all changes to the "value" field.
func (m *EmailMutation) ResetValue() {
	m.value = nil
}

// SetUsersID sets the "users" edge to the User entity by id.
func (m *EmailMutation) SetUsersID(id uuid.UUID) {
	m.users = &id
}

// ClearUsers clears the "users" edge to the User entity.
func (m *EmailMutation) ClearUsers() {
	m.clearedusers = true
}

// UsersCleared reports if the "users" edge to the User entity was cleared.
func (m *EmailMutation) UsersCleared() bool {
	return m.clearedusers
}

// UsersID returns the "users" edge ID in the mutation.
func (m *EmailMutation) UsersID() (id uuid.UUID, exists bool) {
	if m.users != nil {
		return *m.users, true
	}
	return
}

// UsersIDs returns the "users" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UsersID instead. It exists only for internal usage by the builders.
func (m *EmailMutation) UsersIDs() (ids []uuid.UUID) {
	if id := m.users; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUsers resets all changes to the "users" edge.
func (m *EmailMutation) ResetUsers() {
	m.users = nil
	m.clearedusers = false
}

// Where appends a list predicates to the EmailMutation builder.
func (m *EmailMutation) Where(ps ...predicate.Email) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *EmailMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Email).
func (m *EmailMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EmailMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.display != nil {
		fields = append(fields, email.FieldDisplay)
	}
	if m.primary != nil {
		fields = append(fields, email.FieldPrimary)
	}
	if m._type != nil {
		fields = append(fields, email.FieldType)
	}
	if m.value != nil {
		fields = append(fields, email.FieldValue)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EmailMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case email.FieldDisplay:
		return m.Display()
	case email.FieldPrimary:
		return m.Primary()
	case email.FieldType:
		return m.GetType()
	case email.FieldValue:
		return m.Value()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EmailMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case email.FieldDisplay:
		return m.OldDisplay(ctx)
	case email.FieldPrimary:
		return m.OldPrimary(ctx)
	case email.FieldType:
		return m.OldType(ctx)
	case email.FieldValue:
		return m.OldValue(ctx)
	}
	return nil, fmt.Errorf("unknown Email field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EmailMutation) SetField(name string, value ent.Value) error {
	switch name {
	case email.FieldDisplay:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisplay(v)
		return nil
	case email.FieldPrimary:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrimary(v)
		return nil
	case email.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case email.FieldValue:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValue(v)
		return nil
	}
	return fmt.Errorf("unknown Email field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EmailMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EmailMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EmailMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Email numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EmailMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(email.FieldDisplay) {
		fields = append(fields, email.FieldDisplay)
	}
	if m.FieldCleared(email.FieldType) {
		fields = append(fields, email.FieldType)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EmailMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EmailMutation) ClearField(name string) error {
	switch name {
	case email.FieldDisplay:
		m.ClearDisplay()
		return nil
	case email.FieldType:
		m.ClearType()
		return nil
	}
	return fmt.Errorf("unknown Email nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EmailMutation) ResetField(name string) error {
	switch name {
	case email.FieldDisplay:
		m.ResetDisplay()
		return nil
	case email.FieldPrimary:
		m.ResetPrimary()
		return nil
	case email.FieldType:
		m.ResetType()
		return nil
	case email.FieldValue:
		m.ResetValue()
		return nil
	}
	return fmt.Errorf("unknown Email field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EmailMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.users != nil {
		edges = append(edges, email.EdgeUsers)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EmailMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case email.EdgeUsers:
		if id := m.users; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EmailMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EmailMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EmailMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedusers {
		edges = append(edges, email.EdgeUsers)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EmailMutation) EdgeCleared(name string) bool {
	switch name {
	case email.EdgeUsers:
		return m.clearedusers
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EmailMutation) ClearEdge(name string) error {
	switch name {
	case email.EdgeUsers:
		m.ClearUsers()
		return nil
	}
	return fmt.Errorf("unknown Email unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EmailMutation) ResetEdge(name string) error {
	switch name {
	case email.EdgeUsers:
		m.ResetUsers()
		return nil
	}
	return fmt.Errorf("unknown Email edge %s", name)
}

// GroupMutation represents an operation that mutates the Group nodes in the graph.
type GroupMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	displayName     *string
	clearedFields   map[string]struct{}
	users           map[uuid.UUID]struct{}
	removedusers    map[uuid.UUID]struct{}
	clearedusers    bool
	parent          *uuid.UUID
	clearedparent   bool
	children        map[uuid.UUID]struct{}
	removedchildren map[uuid.UUID]struct{}
	clearedchildren bool
	done            bool
	oldValue        func(context.Context) (*Group, error)
	predicates      []predicate.Group
}

var _ ent.Mutation = (*GroupMutation)(nil)

// groupOption allows management of the mutation configuration using functional options.
type groupOption func(*GroupMutation)

// newGroupMutation creates new mutation for the Group entity.
func newGroupMutation(c config, op Op, opts ...groupOption) *GroupMutation {
	m := &GroupMutation{
		config:        c,
		op:            op,
		typ:           TypeGroup,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGroupID sets the ID field of the mutation.
func withGroupID(id uuid.UUID) groupOption {
	return func(m *GroupMutation) {
		var (
			err   error
			once  sync.Once
			value *Group
		)
		m.oldValue = func(ctx context.Context) (*Group, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Group.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGroup sets the old Group of the mutation.
func withGroup(node *Group) groupOption {
	return func(m *GroupMutation) {
		m.oldValue = func(context.Context) (*Group, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GroupMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GroupMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Group entities.
func (m *GroupMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GroupMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GroupMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Group.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDisplayName sets the "displayName" field.
func (m *GroupMutation) SetDisplayName(s string) {
	m.displayName = &s
}

// DisplayName returns the value of the "displayName" field in the mutation.
func (m *GroupMutation) DisplayName() (r string, exists bool) {
	v := m.displayName
	if v == nil {
		return
	}
	return *v, true
}

// OldDisplayName returns the old "displayName" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldDisplayName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisplayName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisplayName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisplayName: %w", err)
	}
	return oldValue.DisplayName, nil
}

// ResetDisplayName resets all changes to the "displayName" field.
func (m *GroupMutation) ResetDisplayName() {
	m.displayName = nil
}

// AddUserIDs adds the "users" edge to the User entity by ids.
func (m *GroupMutation) AddUserIDs(ids ...uuid.UUID) {
	if m.users == nil {
		m.users = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.users[ids[i]] = struct{}{}
	}
}

// ClearUsers clears the "users" edge to the User entity.
func (m *GroupMutation) ClearUsers() {
	m.clearedusers = true
}

// UsersCleared reports if the "users" edge to the User entity was cleared.
func (m *GroupMutation) UsersCleared() bool {
	return m.clearedusers
}

// RemoveUserIDs removes the "users" edge to the User entity by IDs.
func (m *GroupMutation) RemoveUserIDs(ids ...uuid.UUID) {
	if m.removedusers == nil {
		m.removedusers = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.users, ids[i])
		m.removedusers[ids[i]] = struct{}{}
	}
}

// RemovedUsers returns the removed IDs of the "users" edge to the User entity.
func (m *GroupMutation) RemovedUsersIDs() (ids []uuid.UUID) {
	for id := range m.removedusers {
		ids = append(ids, id)
	}
	return
}

// UsersIDs returns the "users" edge IDs in the mutation.
func (m *GroupMutation) UsersIDs() (ids []uuid.UUID) {
	for id := range m.users {
		ids = append(ids, id)
	}
	return
}

// ResetUsers resets all changes to the "users" edge.
func (m *GroupMutation) ResetUsers() {
	m.users = nil
	m.clearedusers = false
	m.removedusers = nil
}

// SetParentID sets the "parent" edge to the Group entity by id.
func (m *GroupMutation) SetParentID(id uuid.UUID) {
	m.parent = &id
}

// ClearParent clears the "parent" edge to the Group entity.
func (m *GroupMutation) ClearParent() {
	m.clearedparent = true
}

// ParentCleared reports if the "parent" edge to the Group entity was cleared.
func (m *GroupMutation) ParentCleared() bool {
	return m.clearedparent
}

// ParentID returns the "parent" edge ID in the mutation.
func (m *GroupMutation) ParentID() (id uuid.UUID, exists bool) {
	if m.parent != nil {
		return *m.parent, true
	}
	return
}

// ParentIDs returns the "parent" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ParentID instead. It exists only for internal usage by the builders.
func (m *GroupMutation) ParentIDs() (ids []uuid.UUID) {
	if id := m.parent; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetParent resets all changes to the "parent" edge.
func (m *GroupMutation) ResetParent() {
	m.parent = nil
	m.clearedparent = false
}

// AddChildIDs adds the "children" edge to the Group entity by ids.
func (m *GroupMutation) AddChildIDs(ids ...uuid.UUID) {
	if m.children == nil {
		m.children = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.children[ids[i]] = struct{}{}
	}
}

// ClearChildren clears the "children" edge to the Group entity.
func (m *GroupMutation) ClearChildren() {
	m.clearedchildren = true
}

// ChildrenCleared reports if the "children" edge to the Group entity was cleared.
func (m *GroupMutation) ChildrenCleared() bool {
	return m.clearedchildren
}

// RemoveChildIDs removes the "children" edge to the Group entity by IDs.
func (m *GroupMutation) RemoveChildIDs(ids ...uuid.UUID) {
	if m.removedchildren == nil {
		m.removedchildren = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.children, ids[i])
		m.removedchildren[ids[i]] = struct{}{}
	}
}

// RemovedChildren returns the removed IDs of the "children" edge to the Group entity.
func (m *GroupMutation) RemovedChildrenIDs() (ids []uuid.UUID) {
	for id := range m.removedchildren {
		ids = append(ids, id)
	}
	return
}

// ChildrenIDs returns the "children" edge IDs in the mutation.
func (m *GroupMutation) ChildrenIDs() (ids []uuid.UUID) {
	for id := range m.children {
		ids = append(ids, id)
	}
	return
}

// ResetChildren resets all changes to the "children" edge.
func (m *GroupMutation) ResetChildren() {
	m.children = nil
	m.clearedchildren = false
	m.removedchildren = nil
}

// Where appends a list predicates to the GroupMutation builder.
func (m *GroupMutation) Where(ps ...predicate.Group) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *GroupMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Group).
func (m *GroupMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GroupMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.displayName != nil {
		fields = append(fields, group.FieldDisplayName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GroupMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case group.FieldDisplayName:
		return m.DisplayName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GroupMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case group.FieldDisplayName:
		return m.OldDisplayName(ctx)
	}
	return nil, fmt.Errorf("unknown Group field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupMutation) SetField(name string, value ent.Value) error {
	switch name {
	case group.FieldDisplayName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisplayName(v)
		return nil
	}
	return fmt.Errorf("unknown Group field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GroupMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GroupMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Group numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GroupMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GroupMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GroupMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Group nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GroupMutation) ResetField(name string) error {
	switch name {
	case group.FieldDisplayName:
		m.ResetDisplayName()
		return nil
	}
	return fmt.Errorf("unknown Group field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GroupMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.users != nil {
		edges = append(edges, group.EdgeUsers)
	}
	if m.parent != nil {
		edges = append(edges, group.EdgeParent)
	}
	if m.children != nil {
		edges = append(edges, group.EdgeChildren)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GroupMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case group.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.users))
		for id := range m.users {
			ids = append(ids, id)
		}
		return ids
	case group.EdgeParent:
		if id := m.parent; id != nil {
			return []ent.Value{*id}
		}
	case group.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.children))
		for id := range m.children {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GroupMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedusers != nil {
		edges = append(edges, group.EdgeUsers)
	}
	if m.removedchildren != nil {
		edges = append(edges, group.EdgeChildren)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GroupMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case group.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.removedusers))
		for id := range m.removedusers {
			ids = append(ids, id)
		}
		return ids
	case group.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.removedchildren))
		for id := range m.removedchildren {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GroupMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedusers {
		edges = append(edges, group.EdgeUsers)
	}
	if m.clearedparent {
		edges = append(edges, group.EdgeParent)
	}
	if m.clearedchildren {
		edges = append(edges, group.EdgeChildren)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GroupMutation) EdgeCleared(name string) bool {
	switch name {
	case group.EdgeUsers:
		return m.clearedusers
	case group.EdgeParent:
		return m.clearedparent
	case group.EdgeChildren:
		return m.clearedchildren
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GroupMutation) ClearEdge(name string) error {
	switch name {
	case group.EdgeParent:
		m.ClearParent()
		return nil
	}
	return fmt.Errorf("unknown Group unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GroupMutation) ResetEdge(name string) error {
	switch name {
	case group.EdgeUsers:
		m.ResetUsers()
		return nil
	case group.EdgeParent:
		m.ResetParent()
		return nil
	case group.EdgeChildren:
		m.ResetChildren()
		return nil
	}
	return fmt.Errorf("unknown Group edge %s", name)
}

// NameMutation represents an operation that mutates the Name nodes in the graph.
type NameMutation struct {
	config
	op              Op
	typ             string
	id              *int
	familyName      *string
	formatted       *string
	givenName       *string
	honorificPrefix *string
	honorificSuffix *string
	middleName      *string
	clearedFields   map[string]struct{}
	users           *uuid.UUID
	clearedusers    bool
	done            bool
	oldValue        func(context.Context) (*Name, error)
	predicates      []predicate.Name
}

var _ ent.Mutation = (*NameMutation)(nil)

// nameOption allows management of the mutation configuration using functional options.
type nameOption func(*NameMutation)

// newNameMutation creates new mutation for the Name entity.
func newNameMutation(c config, op Op, opts ...nameOption) *NameMutation {
	m := &NameMutation{
		config:        c,
		op:            op,
		typ:           TypeName,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNameID sets the ID field of the mutation.
func withNameID(id int) nameOption {
	return func(m *NameMutation) {
		var (
			err   error
			once  sync.Once
			value *Name
		)
		m.oldValue = func(ctx context.Context) (*Name, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Name.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withName sets the old Name of the mutation.
func withName(node *Name) nameOption {
	return func(m *NameMutation) {
		m.oldValue = func(context.Context) (*Name, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NameMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NameMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *NameMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *NameMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Name.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFamilyName sets the "familyName" field.
func (m *NameMutation) SetFamilyName(s string) {
	m.familyName = &s
}

// FamilyName returns the value of the "familyName" field in the mutation.
func (m *NameMutation) FamilyName() (r string, exists bool) {
	v := m.familyName
	if v == nil {
		return
	}
	return *v, true
}

// OldFamilyName returns the old "familyName" field's value of the Name entity.
// If the Name object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NameMutation) OldFamilyName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFamilyName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFamilyName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFamilyName: %w", err)
	}
	return oldValue.FamilyName, nil
}

// ClearFamilyName clears the value of the "familyName" field.
func (m *NameMutation) ClearFamilyName() {
	m.familyName = nil
	m.clearedFields[entname.FieldFamilyName] = struct{}{}
}

// FamilyNameCleared returns if the "familyName" field was cleared in this mutation.
func (m *NameMutation) FamilyNameCleared() bool {
	_, ok := m.clearedFields[entname.FieldFamilyName]
	return ok
}

// ResetFamilyName resets all changes to the "familyName" field.
func (m *NameMutation) ResetFamilyName() {
	m.familyName = nil
	delete(m.clearedFields, entname.FieldFamilyName)
}

// SetFormatted sets the "formatted" field.
func (m *NameMutation) SetFormatted(s string) {
	m.formatted = &s
}

// Formatted returns the value of the "formatted" field in the mutation.
func (m *NameMutation) Formatted() (r string, exists bool) {
	v := m.formatted
	if v == nil {
		return
	}
	return *v, true
}

// OldFormatted returns the old "formatted" field's value of the Name entity.
// If the Name object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NameMutation) OldFormatted(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFormatted is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFormatted requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFormatted: %w", err)
	}
	return oldValue.Formatted, nil
}

// ClearFormatted clears the value of the "formatted" field.
func (m *NameMutation) ClearFormatted() {
	m.formatted = nil
	m.clearedFields[entname.FieldFormatted] = struct{}{}
}

// FormattedCleared returns if the "formatted" field was cleared in this mutation.
func (m *NameMutation) FormattedCleared() bool {
	_, ok := m.clearedFields[entname.FieldFormatted]
	return ok
}

// ResetFormatted resets all changes to the "formatted" field.
func (m *NameMutation) ResetFormatted() {
	m.formatted = nil
	delete(m.clearedFields, entname.FieldFormatted)
}

// SetGivenName sets the "givenName" field.
func (m *NameMutation) SetGivenName(s string) {
	m.givenName = &s
}

// GivenName returns the value of the "givenName" field in the mutation.
func (m *NameMutation) GivenName() (r string, exists bool) {
	v := m.givenName
	if v == nil {
		return
	}
	return *v, true
}

// OldGivenName returns the old "givenName" field's value of the Name entity.
// If the Name object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NameMutation) OldGivenName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGivenName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGivenName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGivenName: %w", err)
	}
	return oldValue.GivenName, nil
}

// ClearGivenName clears the value of the "givenName" field.
func (m *NameMutation) ClearGivenName() {
	m.givenName = nil
	m.clearedFields[entname.FieldGivenName] = struct{}{}
}

// GivenNameCleared returns if the "givenName" field was cleared in this mutation.
func (m *NameMutation) GivenNameCleared() bool {
	_, ok := m.clearedFields[entname.FieldGivenName]
	return ok
}

// ResetGivenName resets all changes to the "givenName" field.
func (m *NameMutation) ResetGivenName() {
	m.givenName = nil
	delete(m.clearedFields, entname.FieldGivenName)
}

// SetHonorificPrefix sets the "honorificPrefix" field.
func (m *NameMutation) SetHonorificPrefix(s string) {
	m.honorificPrefix = &s
}

// HonorificPrefix returns the value of the "honorificPrefix" field in the mutation.
func (m *NameMutation) HonorificPrefix() (r string, exists bool) {
	v := m.honorificPrefix
	if v == nil {
		return
	}
	return *v, true
}

// OldHonorificPrefix returns the old "honorificPrefix" field's value of the Name entity.
// If the Name object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NameMutation) OldHonorificPrefix(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHonorificPrefix is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHonorificPrefix requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHonorificPrefix: %w", err)
	}
	return oldValue.HonorificPrefix, nil
}

// ClearHonorificPrefix clears the value of the "honorificPrefix" field.
func (m *NameMutation) ClearHonorificPrefix() {
	m.honorificPrefix = nil
	m.clearedFields[entname.FieldHonorificPrefix] = struct{}{}
}

// HonorificPrefixCleared returns if the "honorificPrefix" field was cleared in this mutation.
func (m *NameMutation) HonorificPrefixCleared() bool {
	_, ok := m.clearedFields[entname.FieldHonorificPrefix]
	return ok
}

// ResetHonorificPrefix resets all changes to the "honorificPrefix" field.
func (m *NameMutation) ResetHonorificPrefix() {
	m.honorificPrefix = nil
	delete(m.clearedFields, entname.FieldHonorificPrefix)
}

// SetHonorificSuffix sets the "honorificSuffix" field.
func (m *NameMutation) SetHonorificSuffix(s string) {
	m.honorificSuffix = &s
}

// HonorificSuffix returns the value of the "honorificSuffix" field in the mutation.
func (m *NameMutation) HonorificSuffix() (r string, exists bool) {
	v := m.honorificSuffix
	if v == nil {
		return
	}
	return *v, true
}

// OldHonorificSuffix returns the old "honorificSuffix" field's value of the Name entity.
// If the Name object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NameMutation) OldHonorificSuffix(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHonorificSuffix is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHonorificSuffix requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHonorificSuffix: %w", err)
	}
	return oldValue.HonorificSuffix, nil
}

// ClearHonorificSuffix clears the value of the "honorificSuffix" field.
func (m *NameMutation) ClearHonorificSuffix() {
	m.honorificSuffix = nil
	m.clearedFields[entname.FieldHonorificSuffix] = struct{}{}
}

// HonorificSuffixCleared returns if the "honorificSuffix" field was cleared in this mutation.
func (m *NameMutation) HonorificSuffixCleared() bool {
	_, ok := m.clearedFields[entname.FieldHonorificSuffix]
	return ok
}

// ResetHonorificSuffix resets all changes to the "honorificSuffix" field.
func (m *NameMutation) ResetHonorificSuffix() {
	m.honorificSuffix = nil
	delete(m.clearedFields, entname.FieldHonorificSuffix)
}

// SetMiddleName sets the "middleName" field.
func (m *NameMutation) SetMiddleName(s string) {
	m.middleName = &s
}

// MiddleName returns the value of the "middleName" field in the mutation.
func (m *NameMutation) MiddleName() (r string, exists bool) {
	v := m.middleName
	if v == nil {
		return
	}
	return *v, true
}

// OldMiddleName returns the old "middleName" field's value of the Name entity.
// If the Name object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NameMutation) OldMiddleName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMiddleName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMiddleName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMiddleName: %w", err)
	}
	return oldValue.MiddleName, nil
}

// ClearMiddleName clears the value of the "middleName" field.
func (m *NameMutation) ClearMiddleName() {
	m.middleName = nil
	m.clearedFields[entname.FieldMiddleName] = struct{}{}
}

// MiddleNameCleared returns if the "middleName" field was cleared in this mutation.
func (m *NameMutation) MiddleNameCleared() bool {
	_, ok := m.clearedFields[entname.FieldMiddleName]
	return ok
}

// ResetMiddleName resets all changes to the "middleName" field.
func (m *NameMutation) ResetMiddleName() {
	m.middleName = nil
	delete(m.clearedFields, entname.FieldMiddleName)
}

// SetUsersID sets the "users" edge to the User entity by id.
func (m *NameMutation) SetUsersID(id uuid.UUID) {
	m.users = &id
}

// ClearUsers clears the "users" edge to the User entity.
func (m *NameMutation) ClearUsers() {
	m.clearedusers = true
}

// UsersCleared reports if the "users" edge to the User entity was cleared.
func (m *NameMutation) UsersCleared() bool {
	return m.clearedusers
}

// UsersID returns the "users" edge ID in the mutation.
func (m *NameMutation) UsersID() (id uuid.UUID, exists bool) {
	if m.users != nil {
		return *m.users, true
	}
	return
}

// UsersIDs returns the "users" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UsersID instead. It exists only for internal usage by the builders.
func (m *NameMutation) UsersIDs() (ids []uuid.UUID) {
	if id := m.users; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUsers resets all changes to the "users" edge.
func (m *NameMutation) ResetUsers() {
	m.users = nil
	m.clearedusers = false
}

// Where appends a list predicates to the NameMutation builder.
func (m *NameMutation) Where(ps ...predicate.Name) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *NameMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Name).
func (m *NameMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *NameMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.familyName != nil {
		fields = append(fields, entname.FieldFamilyName)
	}
	if m.formatted != nil {
		fields = append(fields, entname.FieldFormatted)
	}
	if m.givenName != nil {
		fields = append(fields, entname.FieldGivenName)
	}
	if m.honorificPrefix != nil {
		fields = append(fields, entname.FieldHonorificPrefix)
	}
	if m.honorificSuffix != nil {
		fields = append(fields, entname.FieldHonorificSuffix)
	}
	if m.middleName != nil {
		fields = append(fields, entname.FieldMiddleName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *NameMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case entname.FieldFamilyName:
		return m.FamilyName()
	case entname.FieldFormatted:
		return m.Formatted()
	case entname.FieldGivenName:
		return m.GivenName()
	case entname.FieldHonorificPrefix:
		return m.HonorificPrefix()
	case entname.FieldHonorificSuffix:
		return m.HonorificSuffix()
	case entname.FieldMiddleName:
		return m.MiddleName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *NameMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case entname.FieldFamilyName:
		return m.OldFamilyName(ctx)
	case entname.FieldFormatted:
		return m.OldFormatted(ctx)
	case entname.FieldGivenName:
		return m.OldGivenName(ctx)
	case entname.FieldHonorificPrefix:
		return m.OldHonorificPrefix(ctx)
	case entname.FieldHonorificSuffix:
		return m.OldHonorificSuffix(ctx)
	case entname.FieldMiddleName:
		return m.OldMiddleName(ctx)
	}
	return nil, fmt.Errorf("unknown Name field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NameMutation) SetField(name string, value ent.Value) error {
	switch name {
	case entname.FieldFamilyName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFamilyName(v)
		return nil
	case entname.FieldFormatted:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFormatted(v)
		return nil
	case entname.FieldGivenName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGivenName(v)
		return nil
	case entname.FieldHonorificPrefix:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHonorificPrefix(v)
		return nil
	case entname.FieldHonorificSuffix:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHonorificSuffix(v)
		return nil
	case entname.FieldMiddleName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMiddleName(v)
		return nil
	}
	return fmt.Errorf("unknown Name field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *NameMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *NameMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NameMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Name numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *NameMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(entname.FieldFamilyName) {
		fields = append(fields, entname.FieldFamilyName)
	}
	if m.FieldCleared(entname.FieldFormatted) {
		fields = append(fields, entname.FieldFormatted)
	}
	if m.FieldCleared(entname.FieldGivenName) {
		fields = append(fields, entname.FieldGivenName)
	}
	if m.FieldCleared(entname.FieldHonorificPrefix) {
		fields = append(fields, entname.FieldHonorificPrefix)
	}
	if m.FieldCleared(entname.FieldHonorificSuffix) {
		fields = append(fields, entname.FieldHonorificSuffix)
	}
	if m.FieldCleared(entname.FieldMiddleName) {
		fields = append(fields, entname.FieldMiddleName)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *NameMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *NameMutation) ClearField(name string) error {
	switch name {
	case entname.FieldFamilyName:
		m.ClearFamilyName()
		return nil
	case entname.FieldFormatted:
		m.ClearFormatted()
		return nil
	case entname.FieldGivenName:
		m.ClearGivenName()
		return nil
	case entname.FieldHonorificPrefix:
		m.ClearHonorificPrefix()
		return nil
	case entname.FieldHonorificSuffix:
		m.ClearHonorificSuffix()
		return nil
	case entname.FieldMiddleName:
		m.ClearMiddleName()
		return nil
	}
	return fmt.Errorf("unknown Name nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *NameMutation) ResetField(name string) error {
	switch name {
	case entname.FieldFamilyName:
		m.ResetFamilyName()
		return nil
	case entname.FieldFormatted:
		m.ResetFormatted()
		return nil
	case entname.FieldGivenName:
		m.ResetGivenName()
		return nil
	case entname.FieldHonorificPrefix:
		m.ResetHonorificPrefix()
		return nil
	case entname.FieldHonorificSuffix:
		m.ResetHonorificSuffix()
		return nil
	case entname.FieldMiddleName:
		m.ResetMiddleName()
		return nil
	}
	return fmt.Errorf("unknown Name field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *NameMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.users != nil {
		edges = append(edges, entname.EdgeUsers)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *NameMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case entname.EdgeUsers:
		if id := m.users; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *NameMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *NameMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *NameMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedusers {
		edges = append(edges, entname.EdgeUsers)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *NameMutation) EdgeCleared(name string) bool {
	switch name {
	case entname.EdgeUsers:
		return m.clearedusers
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *NameMutation) ClearEdge(name string) error {
	switch name {
	case entname.EdgeUsers:
		m.ClearUsers()
		return nil
	}
	return fmt.Errorf("unknown Name unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *NameMutation) ResetEdge(name string) error {
	switch name {
	case entname.EdgeUsers:
		m.ResetUsers()
		return nil
	}
	return fmt.Errorf("unknown Name edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                Op
	typ               string
	id                *uuid.UUID
	active            *bool
	externalID        *string
	password          *string
	preferredLanguage *string
	locale            *string
	timezone          *string
	userType          *string
	userName          *string
	clearedFields     map[string]struct{}
	groups            map[uuid.UUID]struct{}
	removedgroups     map[uuid.UUID]struct{}
	clearedgroups     bool
	emails            map[int]struct{}
	removedemails     map[int]struct{}
	clearedemails     bool
	names             map[int]struct{}
	removednames      map[int]struct{}
	clearednames      bool
	done              bool
	oldValue          func(context.Context) (*User, error)
	predicates        []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uuid.UUID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetActive sets the "active" field.
func (m *UserMutation) SetActive(b bool) {
	m.active = &b
}

// Active returns the value of the "active" field in the mutation.
func (m *UserMutation) Active() (r bool, exists bool) {
	v := m.active
	if v == nil {
		return
	}
	return *v, true
}

// OldActive returns the old "active" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActive: %w", err)
	}
	return oldValue.Active, nil
}

// ResetActive resets all changes to the "active" field.
func (m *UserMutation) ResetActive() {
	m.active = nil
}

// SetExternalID sets the "externalID" field.
func (m *UserMutation) SetExternalID(s string) {
	m.externalID = &s
}

// ExternalID returns the value of the "externalID" field in the mutation.
func (m *UserMutation) ExternalID() (r string, exists bool) {
	v := m.externalID
	if v == nil {
		return
	}
	return *v, true
}

// OldExternalID returns the old "externalID" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldExternalID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExternalID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExternalID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExternalID: %w", err)
	}
	return oldValue.ExternalID, nil
}

// ClearExternalID clears the value of the "externalID" field.
func (m *UserMutation) ClearExternalID() {
	m.externalID = nil
	m.clearedFields[user.FieldExternalID] = struct{}{}
}

// ExternalIDCleared returns if the "externalID" field was cleared in this mutation.
func (m *UserMutation) ExternalIDCleared() bool {
	_, ok := m.clearedFields[user.FieldExternalID]
	return ok
}

// ResetExternalID resets all changes to the "externalID" field.
func (m *UserMutation) ResetExternalID() {
	m.externalID = nil
	delete(m.clearedFields, user.FieldExternalID)
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetPreferredLanguage sets the "preferredLanguage" field.
func (m *UserMutation) SetPreferredLanguage(s string) {
	m.preferredLanguage = &s
}

// PreferredLanguage returns the value of the "preferredLanguage" field in the mutation.
func (m *UserMutation) PreferredLanguage() (r string, exists bool) {
	v := m.preferredLanguage
	if v == nil {
		return
	}
	return *v, true
}

// OldPreferredLanguage returns the old "preferredLanguage" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPreferredLanguage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPreferredLanguage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPreferredLanguage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPreferredLanguage: %w", err)
	}
	return oldValue.PreferredLanguage, nil
}

// ClearPreferredLanguage clears the value of the "preferredLanguage" field.
func (m *UserMutation) ClearPreferredLanguage() {
	m.preferredLanguage = nil
	m.clearedFields[user.FieldPreferredLanguage] = struct{}{}
}

// PreferredLanguageCleared returns if the "preferredLanguage" field was cleared in this mutation.
func (m *UserMutation) PreferredLanguageCleared() bool {
	_, ok := m.clearedFields[user.FieldPreferredLanguage]
	return ok
}

// ResetPreferredLanguage resets all changes to the "preferredLanguage" field.
func (m *UserMutation) ResetPreferredLanguage() {
	m.preferredLanguage = nil
	delete(m.clearedFields, user.FieldPreferredLanguage)
}

// SetLocale sets the "locale" field.
func (m *UserMutation) SetLocale(s string) {
	m.locale = &s
}

// Locale returns the value of the "locale" field in the mutation.
func (m *UserMutation) Locale() (r string, exists bool) {
	v := m.locale
	if v == nil {
		return
	}
	return *v, true
}

// OldLocale returns the old "locale" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLocale(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLocale is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLocale requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocale: %w", err)
	}
	return oldValue.Locale, nil
}

// ClearLocale clears the value of the "locale" field.
func (m *UserMutation) ClearLocale() {
	m.locale = nil
	m.clearedFields[user.FieldLocale] = struct{}{}
}

// LocaleCleared returns if the "locale" field was cleared in this mutation.
func (m *UserMutation) LocaleCleared() bool {
	_, ok := m.clearedFields[user.FieldLocale]
	return ok
}

// ResetLocale resets all changes to the "locale" field.
func (m *UserMutation) ResetLocale() {
	m.locale = nil
	delete(m.clearedFields, user.FieldLocale)
}

// SetTimezone sets the "timezone" field.
func (m *UserMutation) SetTimezone(s string) {
	m.timezone = &s
}

// Timezone returns the value of the "timezone" field in the mutation.
func (m *UserMutation) Timezone() (r string, exists bool) {
	v := m.timezone
	if v == nil {
		return
	}
	return *v, true
}

// OldTimezone returns the old "timezone" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTimezone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimezone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimezone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimezone: %w", err)
	}
	return oldValue.Timezone, nil
}

// ClearTimezone clears the value of the "timezone" field.
func (m *UserMutation) ClearTimezone() {
	m.timezone = nil
	m.clearedFields[user.FieldTimezone] = struct{}{}
}

// TimezoneCleared returns if the "timezone" field was cleared in this mutation.
func (m *UserMutation) TimezoneCleared() bool {
	_, ok := m.clearedFields[user.FieldTimezone]
	return ok
}

// ResetTimezone resets all changes to the "timezone" field.
func (m *UserMutation) ResetTimezone() {
	m.timezone = nil
	delete(m.clearedFields, user.FieldTimezone)
}

// SetUserType sets the "userType" field.
func (m *UserMutation) SetUserType(s string) {
	m.userType = &s
}

// UserType returns the value of the "userType" field in the mutation.
func (m *UserMutation) UserType() (r string, exists bool) {
	v := m.userType
	if v == nil {
		return
	}
	return *v, true
}

// OldUserType returns the old "userType" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUserType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserType: %w", err)
	}
	return oldValue.UserType, nil
}

// ClearUserType clears the value of the "userType" field.
func (m *UserMutation) ClearUserType() {
	m.userType = nil
	m.clearedFields[user.FieldUserType] = struct{}{}
}

// UserTypeCleared returns if the "userType" field was cleared in this mutation.
func (m *UserMutation) UserTypeCleared() bool {
	_, ok := m.clearedFields[user.FieldUserType]
	return ok
}

// ResetUserType resets all changes to the "userType" field.
func (m *UserMutation) ResetUserType() {
	m.userType = nil
	delete(m.clearedFields, user.FieldUserType)
}

// SetUserName sets the "userName" field.
func (m *UserMutation) SetUserName(s string) {
	m.userName = &s
}

// UserName returns the value of the "userName" field in the mutation.
func (m *UserMutation) UserName() (r string, exists bool) {
	v := m.userName
	if v == nil {
		return
	}
	return *v, true
}

// OldUserName returns the old "userName" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUserName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserName: %w", err)
	}
	return oldValue.UserName, nil
}

// ResetUserName resets all changes to the "userName" field.
func (m *UserMutation) ResetUserName() {
	m.userName = nil
}

// AddGroupIDs adds the "groups" edge to the Group entity by ids.
func (m *UserMutation) AddGroupIDs(ids ...uuid.UUID) {
	if m.groups == nil {
		m.groups = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.groups[ids[i]] = struct{}{}
	}
}

// ClearGroups clears the "groups" edge to the Group entity.
func (m *UserMutation) ClearGroups() {
	m.clearedgroups = true
}

// GroupsCleared reports if the "groups" edge to the Group entity was cleared.
func (m *UserMutation) GroupsCleared() bool {
	return m.clearedgroups
}

// RemoveGroupIDs removes the "groups" edge to the Group entity by IDs.
func (m *UserMutation) RemoveGroupIDs(ids ...uuid.UUID) {
	if m.removedgroups == nil {
		m.removedgroups = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.groups, ids[i])
		m.removedgroups[ids[i]] = struct{}{}
	}
}

// RemovedGroups returns the removed IDs of the "groups" edge to the Group entity.
func (m *UserMutation) RemovedGroupsIDs() (ids []uuid.UUID) {
	for id := range m.removedgroups {
		ids = append(ids, id)
	}
	return
}

// GroupsIDs returns the "groups" edge IDs in the mutation.
func (m *UserMutation) GroupsIDs() (ids []uuid.UUID) {
	for id := range m.groups {
		ids = append(ids, id)
	}
	return
}

// ResetGroups resets all changes to the "groups" edge.
func (m *UserMutation) ResetGroups() {
	m.groups = nil
	m.clearedgroups = false
	m.removedgroups = nil
}

// AddEmailIDs adds the "emails" edge to the Email entity by ids.
func (m *UserMutation) AddEmailIDs(ids ...int) {
	if m.emails == nil {
		m.emails = make(map[int]struct{})
	}
	for i := range ids {
		m.emails[ids[i]] = struct{}{}
	}
}

// ClearEmails clears the "emails" edge to the Email entity.
func (m *UserMutation) ClearEmails() {
	m.clearedemails = true
}

// EmailsCleared reports if the "emails" edge to the Email entity was cleared.
func (m *UserMutation) EmailsCleared() bool {
	return m.clearedemails
}

// RemoveEmailIDs removes the "emails" edge to the Email entity by IDs.
func (m *UserMutation) RemoveEmailIDs(ids ...int) {
	if m.removedemails == nil {
		m.removedemails = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.emails, ids[i])
		m.removedemails[ids[i]] = struct{}{}
	}
}

// RemovedEmails returns the removed IDs of the "emails" edge to the Email entity.
func (m *UserMutation) RemovedEmailsIDs() (ids []int) {
	for id := range m.removedemails {
		ids = append(ids, id)
	}
	return
}

// EmailsIDs returns the "emails" edge IDs in the mutation.
func (m *UserMutation) EmailsIDs() (ids []int) {
	for id := range m.emails {
		ids = append(ids, id)
	}
	return
}

// ResetEmails resets all changes to the "emails" edge.
func (m *UserMutation) ResetEmails() {
	m.emails = nil
	m.clearedemails = false
	m.removedemails = nil
}

// AddNameIDs adds the "names" edge to the Name entity by ids.
func (m *UserMutation) AddNameIDs(ids ...int) {
	if m.names == nil {
		m.names = make(map[int]struct{})
	}
	for i := range ids {
		m.names[ids[i]] = struct{}{}
	}
}

// ClearNames clears the "names" edge to the Name entity.
func (m *UserMutation) ClearNames() {
	m.clearednames = true
}

// NamesCleared reports if the "names" edge to the Name entity was cleared.
func (m *UserMutation) NamesCleared() bool {
	return m.clearednames
}

// RemoveNameIDs removes the "names" edge to the Name entity by IDs.
func (m *UserMutation) RemoveNameIDs(ids ...int) {
	if m.removednames == nil {
		m.removednames = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.names, ids[i])
		m.removednames[ids[i]] = struct{}{}
	}
}

// RemovedNames returns the removed IDs of the "names" edge to the Name entity.
func (m *UserMutation) RemovedNamesIDs() (ids []int) {
	for id := range m.removednames {
		ids = append(ids, id)
	}
	return
}

// NamesIDs returns the "names" edge IDs in the mutation.
func (m *UserMutation) NamesIDs() (ids []int) {
	for id := range m.names {
		ids = append(ids, id)
	}
	return
}

// ResetNames resets all changes to the "names" edge.
func (m *UserMutation) ResetNames() {
	m.names = nil
	m.clearednames = false
	m.removednames = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.active != nil {
		fields = append(fields, user.FieldActive)
	}
	if m.externalID != nil {
		fields = append(fields, user.FieldExternalID)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.preferredLanguage != nil {
		fields = append(fields, user.FieldPreferredLanguage)
	}
	if m.locale != nil {
		fields = append(fields, user.FieldLocale)
	}
	if m.timezone != nil {
		fields = append(fields, user.FieldTimezone)
	}
	if m.userType != nil {
		fields = append(fields, user.FieldUserType)
	}
	if m.userName != nil {
		fields = append(fields, user.FieldUserName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldActive:
		return m.Active()
	case user.FieldExternalID:
		return m.ExternalID()
	case user.FieldPassword:
		return m.Password()
	case user.FieldPreferredLanguage:
		return m.PreferredLanguage()
	case user.FieldLocale:
		return m.Locale()
	case user.FieldTimezone:
		return m.Timezone()
	case user.FieldUserType:
		return m.UserType()
	case user.FieldUserName:
		return m.UserName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldActive:
		return m.OldActive(ctx)
	case user.FieldExternalID:
		return m.OldExternalID(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldPreferredLanguage:
		return m.OldPreferredLanguage(ctx)
	case user.FieldLocale:
		return m.OldLocale(ctx)
	case user.FieldTimezone:
		return m.OldTimezone(ctx)
	case user.FieldUserType:
		return m.OldUserType(ctx)
	case user.FieldUserName:
		return m.OldUserName(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActive(v)
		return nil
	case user.FieldExternalID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExternalID(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldPreferredLanguage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPreferredLanguage(v)
		return nil
	case user.FieldLocale:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocale(v)
		return nil
	case user.FieldTimezone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimezone(v)
		return nil
	case user.FieldUserType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserType(v)
		return nil
	case user.FieldUserName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserName(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldExternalID) {
		fields = append(fields, user.FieldExternalID)
	}
	if m.FieldCleared(user.FieldPreferredLanguage) {
		fields = append(fields, user.FieldPreferredLanguage)
	}
	if m.FieldCleared(user.FieldLocale) {
		fields = append(fields, user.FieldLocale)
	}
	if m.FieldCleared(user.FieldTimezone) {
		fields = append(fields, user.FieldTimezone)
	}
	if m.FieldCleared(user.FieldUserType) {
		fields = append(fields, user.FieldUserType)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldExternalID:
		m.ClearExternalID()
		return nil
	case user.FieldPreferredLanguage:
		m.ClearPreferredLanguage()
		return nil
	case user.FieldLocale:
		m.ClearLocale()
		return nil
	case user.FieldTimezone:
		m.ClearTimezone()
		return nil
	case user.FieldUserType:
		m.ClearUserType()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldActive:
		m.ResetActive()
		return nil
	case user.FieldExternalID:
		m.ResetExternalID()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldPreferredLanguage:
		m.ResetPreferredLanguage()
		return nil
	case user.FieldLocale:
		m.ResetLocale()
		return nil
	case user.FieldTimezone:
		m.ResetTimezone()
		return nil
	case user.FieldUserType:
		m.ResetUserType()
		return nil
	case user.FieldUserName:
		m.ResetUserName()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.groups != nil {
		edges = append(edges, user.EdgeGroups)
	}
	if m.emails != nil {
		edges = append(edges, user.EdgeEmails)
	}
	if m.names != nil {
		edges = append(edges, user.EdgeNames)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeGroups:
		ids := make([]ent.Value, 0, len(m.groups))
		for id := range m.groups {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeEmails:
		ids := make([]ent.Value, 0, len(m.emails))
		for id := range m.emails {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeNames:
		ids := make([]ent.Value, 0, len(m.names))
		for id := range m.names {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedgroups != nil {
		edges = append(edges, user.EdgeGroups)
	}
	if m.removedemails != nil {
		edges = append(edges, user.EdgeEmails)
	}
	if m.removednames != nil {
		edges = append(edges, user.EdgeNames)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeGroups:
		ids := make([]ent.Value, 0, len(m.removedgroups))
		for id := range m.removedgroups {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeEmails:
		ids := make([]ent.Value, 0, len(m.removedemails))
		for id := range m.removedemails {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeNames:
		ids := make([]ent.Value, 0, len(m.removednames))
		for id := range m.removednames {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedgroups {
		edges = append(edges, user.EdgeGroups)
	}
	if m.clearedemails {
		edges = append(edges, user.EdgeEmails)
	}
	if m.clearednames {
		edges = append(edges, user.EdgeNames)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeGroups:
		return m.clearedgroups
	case user.EdgeEmails:
		return m.clearedemails
	case user.EdgeNames:
		return m.clearednames
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeGroups:
		m.ResetGroups()
		return nil
	case user.EdgeEmails:
		m.ResetEmails()
		return nil
	case user.EdgeNames:
		m.ResetNames()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
